module.exports = terminal

const tab_window = require('tab_window')
const tab_button = require('buttons/tab_button')
const sm_icon_button_alt = require('buttons/sm_icon_button_alt')
const scrollbar = require('scrollbar_hor')

// CSS Boiler Plat
const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)


let id = 0

function terminal (opts, protocol) {
    const name = `terminal-${id++}`

    let active_tab = 0
    const tabs = {}
    const tab_buttons_id = {}
    let tab_id = 0
    
    const PROTOCOL = {
        close_tab,
        tab_btn_click
    }
    
    const {data} = opts
    // Assigning all the icons
    const {img_src} = data
    const {
        icon_terminal,
        icon_close_light,
        icon_pdf_reader
    } = img_src

    const el = document.createElement('div')
    const shadow = el.attachShadow ( { mode : 'closed' } )

    shadow.innerHTML = `
        <div class="terminal">
            <div class="header">${icon_terminal}Terminal</div>
            <div class="tab_wrapper"></div>
            <div class="footer">
                <div class="scrollbar_wrapper">
                    <div class="tab_buttons"></div>
                </div>
                <div class="buttons"></div>
            </div>
        </div>
        <style> ${get_theme} </style>
    `

    const tab = tab_window({data: opts.data, text: 'Home'})
    tabs[tab_id] = tab
    active_tab = tab_id
    
    const tab_buttons = shadow.querySelector('.tab_buttons')
    const tab_btn = tab_button({data, name:'Home'}, terminal_protocol)
    tab_btn.id = tab_id
    tab_buttons.append(tab_btn)

    const tab_wrapper = shadow.querySelector('.tab_wrapper')
    tab_wrapper.append(tab)

    const terminal_wrapper = shadow.querySelector('.terminal')
    
    const add_btn = sm_icon_button_alt({src: icon_pdf_reader})
    add_btn.onclick = e => {
        tab_id++
        const tab = tab_window({data: opts.data, text: 'New Tab' + tab_id})
        tabs[tab_id] = tab
        tab_wrapper.replaceChildren(tab)
        PROTOCOL[`tab_button-${active_tab}`]()
        active_tab = tab_id
        const tab_btn = tab_button({data, name:'New Tab' + tab_id}, terminal_protocol)
        tab_btn.id = tab_id
        tab_buttons_id[tab_id] = tab_btn
        tab_buttons.append(tab_btn)

        PROTOCOL['handleScroll']()
    }
    const buttons = shadow.querySelector('.buttons')
    buttons.append(add_btn)

    if(screen.width > 510){
        const fullscreen_btn = sm_icon_button_alt({src: icon_pdf_reader})
        fullscreen_btn.onclick = e => terminal_wrapper.style.height === '100vh' ? 
                    terminal_wrapper.style.height = '300px' : 
                    terminal_wrapper.style.height = '100vh'
        buttons.append(fullscreen_btn)
    }
    
    const close_btn = sm_icon_button_alt({src: icon_close_light})
    // add_btn.onclick = e => toggle_terminal()

    buttons.append(close_btn)

    const scrollbar_wrapper = shadow.querySelector('.scrollbar_wrapper')
    scrollbar_wrapper.append(scrollbar( opts, terminal_protocol))
    

    shadow.adoptedStyleSheets = [ sheet ]
    return el

    
    // cover protocol
    function terminal_protocol(handshake, send){
        if(handshake.from.includes('scrollbar')){
            tab_buttons.onscroll = send[0]
            const ro = new ResizeObserver(entries => send[0]());
            ro.observe(tab_buttons);
            PROTOCOL['handleScroll'] = send[0]
            PROTOCOL['getScrollInfo'] = send[1]
            return [listen, setScrollLeft]
        }
        if(handshake.from.includes('tab_button')){
            PROTOCOL[handshake.from] = send
        }
        return listen
        // Listening to toggle event 
        function listen (message) {
            const {head, refs, type, data, meta} = message  
            const {by, to, mid} = head
            if(by.includes('scrollbar'))
            {
                message.data = {sh: tab_buttons.scrollWidth, ch: tab_buttons.clientWidth, st: tab_buttons.scrollLeft}
                PROTOCOL.getScrollInfo(message)
            }
            else
                PROTOCOL[type](data)
        }
    }
    async function invalid (message) { console.error('invalid type', message) }

    async function setScrollLeft(value){
        tab_buttons.scrollLeft = value
    }
    async function close_tab(id){
        if (Object.keys(tabs).length == 1)
            tab_wrapper.removeChild(tabs[id])
        delete tabs[id]

        if(active_tab == id && !Object.keys(tabs).length == 0){
            const temp = Object.values(tabs)[0]
            tab_wrapper.replaceChildren(temp)
            active_tab = Object.keys(tabs)[0]
            PROTOCOL[`tab_button-${active_tab}`]()
        }

        PROTOCOL['handleScroll']()
    }
    async function tab_btn_click(id){
        active_tab && PROTOCOL[`tab_button-${active_tab}`]()
        active_tab = id
        tab_wrapper.replaceChildren(tabs[active_tab])
    }
}

function get_theme(){
    return`
        *{
            box-sizing: border-box;
        }
        .terminal{
            width: 100vw;
            height: 100vh;
            min-height: 100vh;
            max-width: 100%;
            position: fixed;
            top: 0;
            z-index: 100;
            background-color: var(--bg_color);
        }
        .header{
            display: flex;
            background-color: var(--primary_color);
            color: var(--bg_color);
            padding: 10px 5px;
            align-items: center;
            gap: 5px;
        }
        .header svg path{
            fill: white;
        }
        .tab_wrapper{
            background-color: var(--bg_color);
            border: 5px solid var(--primary_color);
            height: 100%;
        }
        .footer{
            position: fixed;
            bottom: 0;
            width: 100vw;
            max-width: 100%;
            --s: 20px; /* control the size */
            --_g: var(--bg_color) /* first color */ 0 25%, #0000 0 50%;
            background:
                repeating-conic-gradient(at 66% 66%,var(--_g)),
                repeating-conic-gradient(at 33% 33%,var(--_g)),
                var(--primary_color);  /* second color */ 
            background-size: var(--s) var(--s);
            display: flex;
            justify-content: space-between;
        }
        .scrollbar_wrapper{
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        .tab_buttons{
            display: flex;
            overflow-x: scroll;
            overflow-y: hidden;
        }
        .tab_buttons::-webkit-scrollbar {
            display: none;
        }
        .buttons{
            display: flex;
            widht: fit-content;
        }
        .buttons > div {
            height: fit-content;
        }
        @media (min-width: 510px){
            .terminal{
                height: 300px;
                min-height: 300px;
                bottom: 0;
                top: auto;
            }
        }
    `
}