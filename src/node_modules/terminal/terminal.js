const tab_window = require('tab-window')
const tab_button = require('buttons/tab-button')
const sm_icon_button_alt = require('buttons/sm-icon-button-alt')
const scrollbar = require('scrollbar')

const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
/******************************************************************************
  TERMINAL COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const default_opts = { }

module.exports = terminal

function terminal (opts = default_opts, protocol) {
  // ----------------------------------------
  // RESOURCE POOL (can't be serialized)
  // ----------------------------------------
  const viewports = {}
  const _ = { viewports }
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = { active_tab: null, tab_id: 0 }
  const aka = { tab: {} }
  const state = STATE.ids[id] = { id, status, _, wait: {}, net: {}, aka } // all state of component instance
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const {
    icon_terminal,
    icon_close_light,
    icon_plus,
    icon_full_screen
  } = opts.data.img_src
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shopts = { mode: 'closed' }
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="terminal_wrapper">
    <div class="terminal">
      <div class="header">${icon_terminal}Terminal</div>
      <div class="tab_display"></div>
      <div class="footer">
        <div class="tabs_bar">
          <div class="tab_buttons"></div>
          <div class="scrollbar-wrapper"></div>
        </div>
        <div class="buttons"></div>
      </div>
    </div>
  </div>`
  const terminal_wrapper = shadow.querySelector('.terminal')
  const tab_buttons = shadow.querySelector('.tab_buttons')
  // ----------------------------------------
  const tab_buttons_shadow = tab_buttons.attachShadow(shopts)
  const tab_display = shadow.querySelector('.tab_display').attachShadow(shopts)
  const scrollbar_wrapper = shadow.querySelector('.scrollbar-wrapper').attachShadow(shopts)
  const buttons = shadow.querySelector('.buttons').attachShadow(shopts)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  buttons.append(sm_icon_button_alt({ src: icon_plus }, spawn_protocol))
  if (screen.width > 510) buttons.append(sm_icon_button_alt({
    src: icon_full_screen
  }, fullscreen_protocol))
  buttons.append(sm_icon_button_alt({ src: icon_close_light }, close_protocol))
  opts.horizontal = true
  opts.data.img_src.icon_arrow_start = opts.data.img_src.icon_arrow_left
  opts.data.img_src.icon_arrow_end = opts.data.img_src.icon_arrow_right
  scrollbar_wrapper.append(scrollbar(opts, scrollbar_protocol))
  // ----------------------------------------
  // INIT
  // ----------------------------------------
  add_tab('Home')

  return el

  function add_tab (label) {
    const petname_win = `win-${label}`
    const petname_btn = `btn-${label}`
    const protocol = shell_protocol({ petname_win, petname_btn })
    const tab_win = tab_window({ data: opts.data, text: label }, protocol.tabwin)
    const tab_btn = tab_button({ data: opts.data, name: label }, protocol.tabbtn)
    if (state.status.active_tab) {
      const active_channel = state.net[state.status.active_tab]
      active_channel.send({ type: 'inactivate' })
      const scroll_channel = state.net[state.aka.scrollbar]
      const head = [id, scroll_channel.send.id, scroll_channel.mid++]
      scroll_channel.send({ head, type: 'handle_scroll' })
    }
    const tab_id = state.aka.tab[petname_btn]
    _.viewports[tab_id] = tab_win
    state.status.active_tab = tab_id
    tab_buttons_shadow.append(tab_btn)
    tab_display.replaceChildren(tab_win)
  }
  // ----------------------------------------
  // PROTOCOLS
  // ----------------------------------------
  function scrollbar_protocol (send) {
    const on = { 'set_scroll_start': on_set_scroll_start, 'status': on_update_size }
    tab_buttons.onscroll = event => {
      console.log('tab_buttons:terminal:scroll')
      send({ type: 'handle_scroll' })
    }
    const ro = new ResizeObserver(entries => {
      console.log('ResizeObserver:terminal:resize')
      send({ type: 'handle_scroll' })
    })
    ro.observe(tab_buttons)
    const scroll_channel = state.net[send.id] = { mid: 0, send, on }
    state.aka.scrollbar = send.id
    return Object.assign(listen, { id })
    function invalid (message) { console.error('invalid type', message) }
    function listen (message) {
      console.log(`[${id}]`, message)
      const { on } = state.net[state.aka.scrollbar]
      const action = on[message.type] || invalid
      action(message)
    }
    function on_set_scroll_start (message) {
      setScrollLeft(message.data)
    }
    function on_update_size (message) {
      const head = [id, scroll_channel.send.id, scroll_channel.mid++]
      scroll_channel.send({
        head,
        refs: { head: message.head },
        type: 'update_size',
        data: {
          sh: tab_buttons.scrollWidth,
          ch: tab_buttons.clientWidth,
          st: tab_buttons.scrollLeft
        }
      })
    }
    async function setScrollLeft (value) {
      tab_buttons.scrollLeft = value
    }
  }
  function shell_protocol ({ petname_win, petname_btn }) {
    return { tabbtn, tabwin }
    function tabwin () {
      return Object.assign(listen, { id })
      function listen (message) {
        console.log(`[${id}]\n${petname_win}:`, message)
      }
    }
    function tabbtn (send) {
      const on = { 'close': close_tab, 'click': switch_tab }
      const channel = state.net[send.id] = { name: petname_btn, mid: 0, send, on }
      state.aka.tab[petname_btn] = send.id
      return Object.assign(listen, { id })
      function invalid (message) { console.error('invalid type', message) }
      function listen (message) {
        console.log(`[${id}]\n${petname_btn}:`, message)
        const { on } = channel
        const action = on[message.type] || invalid
        action(message)
      }
      async function switch_tab () {
        const btn_id = send.id
        if (state.status.active_tab === btn_id) return
        const active_channel = state.net[state.status.active_tab]
        active_channel.send({ type: 'inactivate' })
        state.status.active_tab = btn_id // set tab as active one
        channel.send({ type: 'activate' })
        tab_display.replaceChildren(viewports[btn_id])
      }
      async function close_tab (message) {
        const tab_id = send.id
        if (Object.keys(viewports).length > 1) {
          if (state.status.active_tab === tab_id) {
            const ids = Object.keys(state.net)
            const next_id = ids[(ids.indexOf(tab_id) || ids.length) - 1]
            state.status.active_tab = next_id
            const btn_channel = state.net[next_id]
            btn_channel.send({ type: 'activate' })
            const next_tab_win = viewports[next_id]
            tab_display.replaceChildren(next_tab_win)
          }
        } else {
          state.status.active_tab = undefined
          tab_display.replaceChildren()
        }
        delete viewports[tab_id]
        const { name } = state.net[tab_id]
        delete state.net[tab_id]
        delete state.aka.tab[name]
        const scroll_channel = state.net[state.aka.scrollbar]
        const head = [id, scroll_channel.send.id, scroll_channel.mid++]
        scroll_channel.send({ head, refs: { head: message.head }, type: 'handle_scroll' })
      }
    }
  }
  // ----------------------------------------
  function spawn_protocol (msg, send) {
    return msg => { add_tab('tab-' + state.status.tab_id++) }
  }
  function fullscreen_protocol (msg, send) {
    status.fullscreen = terminal_wrapper.style.height === '100vh'
    return message => onfullscreen()
    function onfullscreen (e) {
      const ismax = status.fullscreen
      terminal_wrapper.style.height = ismax ? '100%' : '100vh'
      terminal_wrapper.style.width = '100%'
      terminal_wrapper.style.position = 'absolute'
      terminal_wrapper.style.bottom = 0
      status.fullscreen = !ismax
    }
  }
  function close_protocol (msg, send) { return msg => { console.log('CLOSE') } }
  // ----------------------------------------
}
function get_theme () {
  return `
    :host {
      height: 100%;
    }
    * {
      box-sizing: border-box;
    }
    .terminal_wrapper {
      display: flex;
      flex-direction: column;
      container-type: inline-size;
      width: 100%;
      height: 100%;
      min-height: 300px;
      .terminal {
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        background-color: var(--bg_color);
        .header {
          display: flex;
          background-color: var(--primary_color);
          color: var(--bg_color);
          padding: 10px 5px;
          align-items: center;
          gap: 5px;
          svg path {
            fill: white;
          }
        }
        .tab_display {
          background-color: var(--bg_color);
          border: 5px solid var(--primary_color);
          flex-grow: 1;
        }
        .footer {
          width: 100%;
          max-width: 100%;
          --s: 20px; /* control the size */
          --_g: var(--bg_color) /* first color */ 0 25%, #0000 0 50%;
          background:
            repeating-conic-gradient(at 66% 66%,var(--_g)),
            repeating-conic-gradient(at 33% 33%,var(--_g)),
            var(--primary_color);  /* second color */ 
          background-size: var(--s) var(--s);
          display: flex;
          justify-content: space-between;
          .tabs_bar {
            display: flex;
            flex-direction: column;
            overflow: hidden;
            .tab_buttons {
              display: flex;
              overflow-x: hidden;
              overflow-y: scroll;
              &:::-webkit-scrollbar {
                display: none;
              }
            }
          }
          .buttons { 
            display: flex;
            widht: fit-content;
            div {
              height: fit-content;
            }
          }
        }
      }
    }
    @container (min-width: 510px) {
      .terminal {
        height: 100%;
      }
    }
  `
}