const search_input = require('search-input')
const select_button = require('buttons/select-button')

const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
/******************************************************************************
  WINDOW BAR COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const default_opts = { }

module.exports = project_filter

function project_filter (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const name = 'project_filter-' + count++
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { tags, data } = opts
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const notify = protocol({ from: name }, listen)
  const PROTOCOL = {}
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shopts = { mode: 'closed' }
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="filter_wrapper">
    <div class="project_filter"></div>
  </div>`
  const project_filter = shadow.querySelector('.project_filter')
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  const search_project = shadowfy()(search_input(opts, project_filter_protocol))
  const status_button = shadowfy()(select_button({ data, name: 'STATUS', choices: ['ACTIVE', 'UNACTIVE', 'PAUSED'] }, project_filter_protocol))
  const tag_button = shadowfy()(select_button({ data, name: 'TAGS', choices: tags }, project_filter_protocol))
  project_filter.append(status_button, tag_button, search_project)
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el

  function shadowfy (props = {}, sheets = []) {
    return element => {
      const el = Object.assign(document.createElement('div'), { ...props })
      const sh = el.attachShadow(shopts)
      sh.adoptedStyleSheets = sheets
      sh.append(element)
      return el
    }
  }
  function project_filter_protocol (handshake, send, mid = 0) {
    if (send) return listen
    function listen (message) {
      const { head,  refs, type, data, meta } = message
      const { by, to, id } = head
      // if( to !== id) return console.error('address unknown', message)
      message = {
        head: { by:name, to: 'app_projects', mid: 0 },
        type: type,
        data: data
      }
      notify(message)
    }
  }
  function listen (message) {
    
  }
}
function get_theme () {
  return `
    .filter_wrapper {
      container-type: inline-size;
    }
    .project_filter {
      display: grid;
      grid-template-columns: 12fr;
      align-items: flex-end;
    }
    @container (min-width: 412px) {
      .project_filter {
        grid-template-columns: 1fr 1fr 10fr;
      }
    }
  `
}