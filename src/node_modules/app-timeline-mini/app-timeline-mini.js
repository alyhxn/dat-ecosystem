const path = require('path')
const window_bar = require('window-bar')
const timeline_card = require('timeline-card')
const sm_text_button = require('buttons/sm-text-button')
const scrollbar = require('scrollbar')

const cwd = process.cwd()
const prefix = path.relative(cwd, __dirname)

// CSS Boiler Plat
const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)

let id = 0

module.exports = app_timeline_mini

function app_timeline_mini (opts, protocol) {
  const name = `app_timeline_mini-${id++}`
  const { data } = opts
  const PROTOCOL = {}
  // Assigning all the icons
  const { img_src: {
    icon_folder= `${prefix}/icon_folder.svg`,
  } } = data
  const el = document.createElement('div')
  const shadow = el.attachShadow ({ mode : 'closed' })
  shadow.innerHTML = `
    <div class="main_wrapper">
      <div class="timeline_wrapper"></div>
    </div>
    <style> ${get_theme()} </style>
  `
  // Adding Applicatin window Bar
  const cover_window = window_bar({
    name:'TIMELINE', 
    src: icon_folder,
    action_buttons: ['View more (12)'],
    data: data
  }, timeline_mini_protocol)
  // Adding timeline cards
  const timeline_wrapper = shadow.querySelector('.timeline_wrapper')
  const cards_data = [{
    title: 'Official starting of the web course.', date: 'July 11, 2022', time: '07:05AM', link: '/', desc: 'The course is called - vanilla.js hyper modular web component building course and it will last approximately 4-8 weeks.. ', tags: ['Hypercore', 'Hypercore', 'Hypercore'], data,
  },{
    title: 'Official starting of the web course.', date: 'July 11, 2022', time: '07:05AM', link: '/', desc: 'The course is called - vanilla.js hyper modular web component building course and it will last approximately 4-8 weeks.. ', tags: ['Hypercore', 'Hypercore', 'Hypercore'], data,
  },{
    title: 'Official starting of the web course.', date: 'July 11, 2022', time: '07:05AM', link: '/', desc: 'The course is called - vanilla.js hyper modular web component building course and it will last approximately 4-8 weeks.. ', tags: ['Hypercore', 'Hypercore', 'Hypercore'], data,
  },{
    title: 'Official starting of the web course.', date: 'July 11, 2022', time: '07:05AM', link: '/', desc: 'The course is called - vanilla.js hyper modular web component building course and it will last approximately 4-8 weeks.. ', tags: ['Hypercore', 'Hypercore', 'Hypercore'], data,
  },{
    title: 'Official starting of the web course.', date: 'July 11, 2022', time: '07:05AM', link: '/', desc: 'The course is called - vanilla.js hyper modular web component building course and it will last approximately 4-8 weeks.. ', tags: ['Hypercore', 'Hypercore', 'Hypercore'], data,
  },{
    title: 'Official starting of the web course.', date: 'July 11, 2022', time: '07:05AM', link: '/', desc: 'The course is called - vanilla.js hyper modular web component building course and it will last approximately 4-8 weeks.. ', tags: ['Hypercore', 'Hypercore', 'Hypercore'], data,
  },{
    title: 'Official starting of the web course.', date: 'July 11, 2022', time: '07:05AM', link: '/', desc: 'The course is called - vanilla.js hyper modular web component building course and it will last approximately 4-8 weeks.. ', tags: ['Hypercore', 'Hypercore', 'Hypercore'], data,
  },{
    title: 'Official starting of the web course.', date: 'July 11, 2022', time: '07:05AM', link: '/', desc: 'The course is called - vanilla.js hyper modular web component building course and it will last approximately 4-8 weeks.. ', tags: ['Hypercore', 'Hypercore', 'Hypercore'], data,
  },{
    title: 'Official starting of the web course.', date: 'July 11, 2022', time: '07:05AM', link: '/', desc: 'The course is called - vanilla.js hyper modular web component building course and it will last approximately 4-8 weeks.. ', tags: ['Hypercore', 'Hypercore', 'Hypercore'], data,
  },{
    title: 'Official starting of the web course.', date: 'July 11, 2022', time: '07:05AM', link: '/', desc: 'The course is called - vanilla.js hyper modular web component building course and it will last approximately 4-8 weeks.. ', tags: ['Hypercore', 'Hypercore', 'Hypercore'], data,
  }]
  timeline_wrapper.append(...cards_data.map(timeline_card))
  const main_wrapper = shadow.querySelector('.main_wrapper')
  opts.data.img_src.icon_arrow_start = opts.data.img_src.icon_arrow_up
  opts.data.img_src.icon_arrow_end = opts.data.img_src.icon_arrow_down
  main_wrapper.append(scrollbar({data: data}, timeline_mini_protocol))
  shadow.prepend(cover_window)
  shadow.adoptedStyleSheets = [ sheet ]

  return el

  function timeline_mini_protocol (handshake, send) {
    if (!send) {
      send = handshake
      handshake = { from: send.id }
    }
    if (handshake.from.includes('scrollbar')) {


      timeline_wrapper.onscroll = event => send({ type: 'handle_scroll' })
      const ro = new ResizeObserver(entries => send({ type: 'handle_scroll' }))
      ro.observe(main_wrapper)
      PROTOCOL.scrollbar = send


      return listen
    }
    else if (handshake.from.includes('window_bar')) {
      PROTOCOL['toggle_active_state'] = toggle_active_state;
      return listen;
    }
    function listen (message) {
      const { head,  refs, type, data, meta } = message
      const { by, to, id } = head
      // if( to !== name) return console.error('address unknown', message)
      if (by.includes('scrollbar')) {
        if (message.type === 'set_scroll_start') return setScrollTop(message.data)

        message.type = 'update_size'
        message.data = {sh: timeline_wrapper.scrollHeight, ch: timeline_wrapper.clientHeight, st: timeline_wrapper.scrollTop}
        PROTOCOL.scrollbar(message)


      }
      else if (by.includes('window_bar')) {
        PROTOCOL[type](message)
      }
    }
    function setScrollTop (value) {
      timeline_wrapper.scrollTop = value
    }
    async function toggle_active_state (message) {
      const { head, refs, type, data, meta } = message
      const { active_state } = data
      ;( active_state === 'active')?el.style.display = 'none':''
    }
  }
}
function get_theme () {
  return`
    .main_wrapper {
      display: flex;
      container-type: inline-size;
      width: 100%;
      height: 100%;
      margin-bottom: 30px;
      border: 1px solid var(--primary_color);
      * { box-sizing: border-box; }
      .timeline_wrapper {
        --s: 20px; /* control the size */
        --_g: var(--bg_color) /* first color */ 0 25%, #0000 0 50%;
        background:
          repeating-conic-gradient(at 66% 66%,var(--_g)),
          repeating-conic-gradient(at 33% 33%,var(--_g)),
          var(--primary_color);  /* second color */ 
        background-size: var(--s) var(--s);  
        overflow: scroll;
        scrollbar-width: none; /* For Firefox */
        border: 1px solid var(--primary_color);
        width: 100%;
        height: 400px;
        padding: 0px;
        display: grid;
        gap: 20px;
        grid-template-columns: 12fr;
        &::-webkit-scrollbar {
          display: none;
        }
      }
    }
    @container (min-width: 768px) {
      .main_wrapper {
        .timeline_wrapper {
          grid-template-columns: repeat(2, 6fr);
        }
      }
    }
    @container (min-width: 1200px) {
      .main_wrapper {
        .timeline_wrapper {
          grid-template-columns: repeat(3, 4fr);
        }
      }
    }
  `
}