const sm_icon_button = require('buttons/sm-icon-button')
/******************************************************************************
  PROJECT CARD COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = project_card
// ----------------------------------------
function project_card (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data, socials, project_logo, desc, tags, project } = opts
  // Assigning all the icons
  const { img_src: { 
      icon_consortium = `${prefix}/icon_consortium_page.png`,
  } } = data
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = {}
  const channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="project_card">
    <div class="icon_wrapper">
      <div class="project_title">
        ${project}
        <img src="${project_logo}">
      </div>
      <div class="socials_wrapper"><socials></socials></div>
    </div>
    <div class="content_wrapper">
      <div class="desc"> ${desc}</div>
    </div>
    <div class="tags_wrapper">
      ${tags.map(tag => `<div class="tag">${tag}</div>`).join('')}
    </div>
  </div>`
  const socials_wrapper = shadow.querySelector('socials')
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  socials_wrapper.replaceWith(...socials.map(x => sm_icon_button({ src: x })).map(shadowfy()))
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el

}
function get_theme () {
  return `
    * {
      box-sizing: border-box;
    }
    .project_card {
      height: max-content;
      width: 100%;
      line-height: normal;
      background-color: var(--bg_color);
      color: var(--primary_color) !important;
      border: 1px solid var(--primary_color);
      container-type: inline-size;
      box-sizing: border-box;
      .icon_wrapper {
        display: flex;
        justify-content: space-between;
        border-bottom: 1px solid var(--primary_color);
        .project_title {
          display: flex;
          gap: 5px;
          font-size: 16px;
          letter-spacing: -2px;
          align-items: center;
          font-weight: 700;
          margin-left: 5px;
        }
        .socials_wrapper {
          display: flex;
        }
      }
      .content_wrapper {
        padding: 20px;
        .desc {
          font-size: 14px;
          letter-spacing: -2px;
          line-height: 16px;
        }
      }
      .tags_wrapper {
        display: flex;
        flex-wrap: wrap;
        .tag {
          flex-grow: 1;
          min-width: max-content;
          padding:5px 10px;
          border: 1px solid var(--primary_color);
          text-align:center;
        }
      }
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}