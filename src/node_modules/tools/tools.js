const window_bar = require('window-bar')
/******************************************************************************
  TOOLS COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = tools
// ----------------------------------------
function tools (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  // Assigning all the icons
  const { img_src } = data
  const {
    icon_folder,
    icon_discord,
    icon_github,
  } = img_src
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = { 'show': on_show }
  const channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="tools">
    <div class="windowbar"></div>
    <div class="tools_content">
      <div class="icon">
        ${icon_discord}
        <span>discord link</span>
      </div>
      <div class="icon">
        ${icon_github}
        <span>github link</span>
      </div>
    </div>
  </div>`
  const tools_wrapper = shadow.querySelector('.tools')
  // ----------------------------------------
  const windowbar_shadow = shadow.querySelector('.windowbar').attachShadow(shopts)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // windowbar
    const on = {
      'toggle_active_state': toggle_active_state
    }
    const protocol = use_protocol('windowbar')({ state, on })
    const opts = {
      name: 'tools.md', 
      src: icon_folder,
      data: data
    }
    const element = window_bar(opts, protocol)
    windowbar_shadow.append(element)
    async function toggle_active_state (message) {
      const { active_state } = message.data
      if (active_state === 'active') tools_wrapper.style.display = 'none'
    }
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el

  function on_show (event) {
    tools_wrapper.style.display = 'inline'
  }
}

function get_theme () {
  return `
    * {
      box-sizing: border-box;
    }
    .tools {
      display: none;
      .tools_content {
        position: relative;
        display: flex;
        padding: 10px;
        width: 100vw;
        height: 100vh;
        background-size: 10px 10px;
        background-color: var(--bg_color);
        border: 1px solid var(--primary_color);
        gap: 25px;
        margin-bottom: 30px;
        .icon {
          display: flex;
          flex-direction: column;
          gap: 5px;
          align-items: center;
          svg {
            width: 50px;
            height: 50px;
          }
        }
      }
    }
    @container (min-width: 510px) {
      .tools {
        .tools_content {
          width: auto;
          height: auto;
        }
      }
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}