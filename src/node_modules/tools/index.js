module.exports = tools

const window_bar = require('window_bar')

// CSS Boiler Plat
const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)


let id = 0


function tools (opts, protocol) {
    const name = `tools`

    protocol({from: name}, listen)
    function listen(){
        tools_wrapper.style.display = 'inline'
    }

    const {data} = opts
    // Assigning all the icons
    const {img_src} = data
    const {
        icon_folder,
        icon_discord,
        icon_github,
    } = img_src

    const el = document.createElement('div')
    const shadow = el.attachShadow ( { mode : 'closed' } )

    shadow.innerHTML = `
        <div class="tools">
            <div class="tools_content">
                <div class="icon">
                    ${icon_discord}
                    <span>discord link</span>
                </div>
                <div class="icon">
                    ${icon_github}
                    <span>github link</span>
                </div>
            </div>
        </div>
        <style> ${get_theme} </style>
    `


    const window = window_bar({
        name:'tools.md', 
        src: icon_folder,
        data: data
    }, tools_protocol)
    const tools_wrapper = shadow.querySelector('.tools')
    tools_wrapper.prepend(window)


    shadow.adoptedStyleSheets = [ sheet ]
    return el

    
    // cover protocol
    function tools_protocol(message, send){
        return listen
        // Listening to toggle event 
        function listen (message) {
            const {head, refs, type, data, meta} = message  
            const PROTOCOL = {
                'toggle_active_state': toggle_active_state
            }
            const action = PROTOCOL[type] || invalid      
            action(message)
        }
        function invalid (message) { console.error('invalid type', message) }
        async function toggle_active_state (message) {
            const {head, refs, type, data, meta} = message
            const {active_state} = data
            ;( active_state === 'active')?tools_wrapper.style.display = 'none':''
        }
    }
    

}

function get_theme(){
    return`
        *{
            box-sizing: border-box;
        }
        .tools{
            display: none;
        }
        .tools_content{
            position:relative;
            width: 500px;
            display:flex;
            padding: 10px;
            background-size: 10px 10px;
            background-color:var(--bg_color);
            border: 1px solid var(--primary_color);
            gap: 25px;
            margin-bottom: 30px;
        }
        .icon{
            display: flex;
            flex-direction: column;
            gap: 5px;
            align-items: center;
        }
        .icon svg{
            width: 50px;
            height: 50px;
        }
        h2{
            margin: 0;
        }

    `
}