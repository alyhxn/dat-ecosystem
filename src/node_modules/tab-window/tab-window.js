const scrollbar = require('scrollbar')
/******************************************************************************
  TAB WINDOW COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = tab_window
// ----------------------------------------
function tab_window (opts = default_opts, protocol) {
  // ----------------------------------------
  // RESOURCE POOL (can't be serialized)
  // ----------------------------------------
  const ro = new ResizeObserver(entries => {
    console.log('ResizeObserver:terminal:resize')
    const scroll_channel = state.net[state.aka.scrollbar]
    scroll_channel.send({
      head: [id, scroll_channel.send.id, scroll_channel.mid++],
      refs: { },
      type: 'handle_scroll',
    })
  })
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  status.commands = {
    'help': on_help,
    'list': on_list,
    'goto': on_goto,
    'read': on_read,
    'unknown': {content: 'Command not found', status: 'red'}
  }
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { text } = opts
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = { 
    'toggle_fullscreen': toggle_fullscreen
  }
  const channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="tab_wrapper">
    <div class="scrollbar_wrapper">
      <div>
        Type help() for more info.
      </div>
      <div class="history">
      </div>
      <div class="dollar">
        <textarea type="text" id="input" autocomplete="off"></textarea>
      </div>
    </div>
  </div>`
  const tab_wrapper = shadow.querySelector('.tab_wrapper')
  const scrollbar_wrapper = shadow.querySelector('.scrollbar_wrapper')
  const history = shadow.querySelector('.history')
  const input = shadow.querySelector('textarea')
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  input.onkeyup = textAreaAdjust
  input.onkeydown = submitOnEnter
  
  { // scrollbar
    const on = { 'set_scroll': on_set_scroll, 'status': on_update_size }
    const protocol = use_protocol('scrollbar')({ state, on })
    opts.horizontal = false
    opts.data.img_src.icon_arrow_start = opts.data.img_src.icon_arrow_up
    opts.data.img_src.icon_arrow_end = opts.data.img_src.icon_arrow_down
    const scroll_opts = opts
    const element = scrollbar(scroll_opts, protocol)

    scrollbar_wrapper.onscroll = on_scroll
    const scroll_channel = state.net[state.aka.scrollbar]
    ro.observe(scrollbar_wrapper)

    tab_wrapper.append(element)

    function on_scroll (event) {
      console.log('scrollbar_wrapper:terminal:scroll')
      scroll_channel.send({
        head: [id, scroll_channel.send.id, scroll_channel.mid++],
        refs: { },
        type: 'handle_scroll',
      })
    }
    function on_set_scroll (message) {
      console.log('set_scroll', message) 
      setScrollTop(message.data)
    }
    function on_update_size (message) {
      const head = [id, scroll_channel.send.id, scroll_channel.mid++]
      scroll_channel.send({
        head,
        refs: { cause: message.head },
        type: 'update_size',
        data: {
          sh: scrollbar_wrapper.scrollHeight,
          ch: scrollbar_wrapper.clientHeight,
          st: scrollbar_wrapper.scrollTop
        }
      })
    }
    async function setScrollTop (value) {
      scrollbar_wrapper.scrollTop = value
    }
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el

  function textAreaAdjust (e) {
    e.target.style.height = "1px";
    e.target.style.height = (25+e.target.scrollHeight)+"px";
  }
  function submitOnEnter (e) {
    if (e.which === 13){
      if (input.value) {
        const prompt = document.createElement('div')
        prompt.classList.add('prompt')
        prompt.innerHTML = `$ ${input.value}`
        
        const [command, data] = input.value.toLowerCase().split('(')
        
        const response = document.createElement('div')
        let response_data
        if(status.commands[command] && data && data.slice(-1) === ')'){
          response_data = status.commands[command](data.replace(/[)'"']/g, ''))
        }
        else{
          response_data = status.commands['unknown']
        }
        
        response.classList.add(response_data.status)
        response.innerHTML = response_data.content

        history.append(...[prompt, response])
      }
      else{
        const prompt = document.createElement('div')
        prompt.innerHTML = '$'
        history.append(prompt)
      }
      //Clear input
      setTimeout(() => input.value = '', 2)
    }
  }
  function on_list (data){
    const command_list = require(`../data/data.json`)
    let response

    if(data){
      response = command_list
      const arguments = data.split('/') 
      arguments.forEach(argument => {
          response = response[argument]
        }
      )
    }
    else{
      response = command_list
    }
    
    if(typeof(response) === 'object'){
      return {content: '[' + Object.entries(response).map(v => {
        if(typeof(v[1]) === 'string')
          return v[0]
        else
          return v[0] + '/'
      }).toString().replace(/,/g, ', ') + ']', status: 'green'}
    }
    return {content: 'undefined', status: 'red'}
  }
  function on_read (data){
    const command_list = require(`../data/data.json`)
    let response

    if(data){
      response = command_list
      const arguments = data.split('/') 
      arguments.forEach(argument => {
          response = response[argument]
        }
      )
    }

    if(typeof(response) === 'string')
      return {content: response, status: 'green'}
    return {content: 'undefined', status: 'red'}
  }
  function on_help (){
    return {content: `
      ------------------------------------------- <br>
      ### Description of commands ### <br>
      <b>goto</b>(<u>page_name</u>) // <i>page_name refers to website pages. For instance 'goto(projects)'</i><br>
      - goto command will bring you to the specified page <br>
      <br>
      <b>list</b>(<u>folder_address</u>: optional) // <i>folder_address refers to the JSON address of the folder. For instance 'list(info)'</i><br>
      - list command will list the items in the specified folder <br>
      <br>
      <b>read</b>(<u>file_address>) // <i>file_address refers to the JSON address of the file. For instance 'read(info/mission_statement.md)'</i><br>
      - read command will print the content in the specified file <br>
      ------------------------------------------- <br>
      ### Pages ### <br>
      Consortium<br>
      Home<br>
      Timeline<br>
      Dat_garden<br>
      Projects<br>
      ------------------------------------------- <br>
      ### Files and Folders ### <br>
      Type list() for more info. Folders end with / and File end with letters<br>
      ------------------------------------------- <br>
      `, status: 'green'}
  }
  function on_goto (data){
    data = data.toUpperCase()
    const pages = ['TIMELINE', 'PROJECTS', 'HOME', 'DAT_GARDEN', 'CONSORTIUM']
    if(pages.includes(data)){
      const up_channel = state.net[state.aka.up]
      up_channel.send({
        head: [id, up_channel.send.id, up_channel.mid++],
        type: 'navigate',
        data
      })
      return {content: 'success', status: 'green'}
    }
    return {content: 'page not found', status: 'red'}
  }
  function toggle_fullscreen (msg){
    scrollbar_wrapper.classList.toggle('fullscreen')
  }

}

function get_theme() {
  return `
    .tab_wrapper{
      display: flex;
    }
    .tab_wrapper > div:last-child{
      border-left: 1px solid var(--primary_color);
    }
    .scrollbar_wrapper{
      max-height: 220px;
      overflow-y: scroll;
      overflow-x: clip;
      width: 100%;
    }
    .scrollbar_wrapper.fullscreen{
      max-height: calc(100vh - 80px);
    }
    .scrollbar_wrapper::-webkit-scrollbar {
      display: none;
    }
    .tab_wrapper #input{
      display: inline;
      background-color: transparent;
      color: blue;
      border: none;
      outline: none;
      width: 100%;
      text-indent: 20px;
      font-family: Silkscreen;
      font-size: 16px;
      padding: 0;
      resize: none;
    }
    .tab_wrapper .dollar{
      position: relative;
    }
    .tab_wrapper .dollar::before{
      content: '$';
      position: absolute;
      color: blue;
      top: 0;
    }
    .tab_wrapper .prompt{
      color: blue;
    }
    .tab_wrapper .red{
      color: red;
    }
    .tab_wrapper .green{
      color: green;
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}