const icon_button = require('buttons/icon-button')
const logo_button = require('buttons/logo-button')
const text_button = require('buttons/text-button')
const path = require('path')

const cwd = process.cwd()
const prefix = path.relative(cwd, __dirname)

const sheet = new CSSStyleSheet()

sheet.replaceSync(get_theme())
/******************************************************************************
  NAVBAR COMPONENT
******************************************************************************/
var count = 0
const ID = __filename
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const default_opts = { page: 'HOME' }

module.exports = navbar

function navbar (opts = default_opts, protocol) {
  // ----------------------------------------
  // INSTANCE STATE & ID
  const id = `${ID}:${count++}` // assigns their own name
  const state = STATE.ids[id] = { status: {}, wait: {}, net: {}, aka: {} } // all state of component instance
  // ----------------------------------------
  const on = { 'theme': handle_active_change }
  // ----------------------------------------
  const send = protocol(Object.assign(listen, { id }))
  state.net[send.id] = { mid: 0, send, on } // store channel
  state.aka.up = send.id
  function invalid (message) { console.error('invalid type', message) }
  function listen (message) {
    console.log(`[${id}]`, message)
    const { on } = state.net[state.aka.up] // @TODO: from `to`
    const action = on[message.type] || invalid
    action(message)
  }
  // @TODO: how to disconnect channel
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data, page = default_opts.page } = opts
  // Assigning all the icons
  const {
    icon_consortium,
    icon_blogger,
    icon_discord,
    icon_twitter,
    icon_github,
    icon_terminal,
    icon_theme,
    icon_arrow_down,
    icon_arrow_up
  } = data.img_src
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `<div class="navbar_wrapper">
    <div class="navbar">
      <div class="nav_toggle_wrapper">
        <div class="info_wrapper"></div>
        <div class="logo_wrapper"></div>
        <div class="nav_toggle"></div>
      </div>
      <div class="page_btns_wrapper"></div>
      <div class="icon_btn_wrapper"></div>
    </div>
  </div>`
  shadow.adoptedStyleSheets = [sheet]
  const navbar = shadow.querySelector('.navbar')
  const info_sh = shadow.querySelector('.info_wrapper').attachShadow({ mode: 'closed' })
  const logo_sh = shadow.querySelector('.logo_wrapper').attachShadow({ mode: 'closed' })
  const nav_sh = shadow.querySelector('.nav_toggle').attachShadow({ mode: 'closed' })
  const text_wrapper = shadow.querySelector('.page_btns_wrapper')
  const icon_wrapper = shadow.querySelector('.icon_btn_wrapper')
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  const consortium_btn = icon_button({ src: icon_consortium }, navigation_protocol('CONSORTIUM'))
  const logo_btn = logo_button()
  const nav_btn = icon_button({ src: icon_arrow_down, src_active: icon_arrow_up }, nav_protocol('navtoggle'))
  const text_btns = [
    text_button({ text: 'HOME' }, navigation_protocol('HOME')),
    text_button({ text: 'PROJECTS' }, navigation_protocol('PROJECTS')),
    text_button({ text: 'GROWTH PROGRAM' }, navigation_protocol('GROWTH PROGRAM')),
    text_button({ text: 'TIMELINE' }, navigation_protocol('TIMELINE'))
  ]
  const icon_btns = [
    icon_button({ src: icon_blogger }, socials_protocol('blog-button')),
    icon_button({ src: icon_discord }, socials_protocol('discord-button')),
    icon_button({ src: icon_twitter }, socials_protocol('twitter-button')),
    icon_button({ src: icon_github }, socials_protocol('github-button')),
    icon_button({ src: icon_terminal }, terminal_protocol('terminal-button')),
    icon_button({ src: icon_theme }, theme_button_protocol('theme-button'))
  ]
  info_sh.append(consortium_btn)
  logo_sh.append(logo_btn)
  nav_sh.append(nav_btn)
  text_wrapper.append(...text_btns.map(wrap('text_button_wrapper')))
  icon_wrapper.append(...icon_btns.map(wrap('')))
  // ----------------------------------------
  // INIT
  // ----------------------------------------
  initialize(page)

  return el

  function wrap (className) {
    return button => {
      const el = Object.assign(document.createElement('div'), { className })
      el.attachShadow({ mode: 'closed' }).append(button)
      return el
    }
  }
  function nav_protocol (petname) {
    return send => {
      const on = { 'click': onclick }
      const channel = state.net[send.id] = { mid: 0, send, on }
      state.aka[petname] = send.id
      return Object.assign(listen, { id })
      function invalid (message) { console.error('invalid type', message) }
      function listen (message) {
        console.log(`[${id}]\n${petname}:`, message)
        const { on } = state.net[state.aka[petname]]
        const action = on[message.type] || invalid
        action(message)
      }
      function onclick (message){
        state.status.dropdown_collapsed = !state.status.dropdown_collapsed
        navbar.classList.toggle('active', state.status.dropdown_collapsed)
        send({
          head: [id, send.id, channel.mid++],
          refs: { cause: message.head },
          type: state.status.dropdown_collapsed ? 'activate' : 'inactivate',
        })
      }
    }
  }
  function socials_protocol (petname) {
    return function protocol (send) {
      const on = { 'click': onclick }
      state.net[send.id] = { mid: 0, send, on }
      state.aka[petname] = send.id
      return Object.assign(listen, { id })
      function invalid (message) { console.error('invalid type', message) }
      function listen (message) {
        console.log(`[${id}]\n${petname}:`, message)
        const { on } = state.net[state.aka[petname]]
        const action = on[message.type] || invalid
        action(message)
      }
      function onclick (message) {
        const up_channel = state.net[state.aka.up]
        const [by, to, mid] = [id, petname, up_channel.mid++]
        up_channel.send({
          head: [by, to, mid],
          refs: { cause: message.head },
          type: 'social',
          data: petname
        })
      }
    }
  }
  function terminal_protocol (petname) {
    return function protocol (send) {
      const on = { 'click': onclick }
      const channel = state.net[send.id] = { mid: 0, send, on }
      state.aka[petname] = send.id
      return Object.assign(listen, { id })
      function invalid (message) { console.error('invalid type', message) }
      function listen (message) {
        console.log(`[${id}]\n${petname}:`, message)
        const { on } = state.net[state.aka[petname]]
        const action = on[message.type] || invalid
        action(message)
      }
      function onclick (message) {
        state.status.terminal_collapsed = !state.status.terminal_collapsed
        const up_channel = state.net[state.aka.up]
        const [by, to, mid] = [id, petname, up_channel.mid++]
        up_channel.send({
          head: [by, to, mid],
          refs: { cause: message.head },
          type: 'toggle_terminal',
        })
        channel.send({
          head: [id, send.id, channel.mid++],
          refs: { cause: message.head },
          type: state.status.terminal_collapsed ? 'activate' : 'inactivate',
        })
      }
    }
  }
  function theme_button_protocol (petname) {
    return function protocol (send) {
      const on = { 'click': onclick }
      const channel = state.net[send.id] = { mid: 0, send, on }
      state.aka[petname] = send.id
      return Object.assign(listen, { id })
      function invalid (message) { console.error('invalid type', message) }
      function listen (message) {
        console.log(`[${id}]\n${petname}:`, message)
        const { on } = state.net[state.aka[petname]]
        const action = on[message.type] || invalid
        action(message)
      }
      function onclick (message) {
        state.status.theme_dark = !state.status.theme_dark
        const up_channel = state.net[state.aka.up]
        const [by, to, mid] = [id, petname, up_channel.mid++]
        up_channel.send({
          head: [by, to, mid],
          refs: { cause: message.head },
          type: 'handle_theme_change',
          data: ''
        })
        channel.send({
          head: [id, send.id, channel.mid++],
          refs: { cause: message.head },
          type: state.status.theme_dark ? 'activate' : 'inactivate',
        })
      }
    }
  }
  function initialize (page) {
    // SET DEFAULTS
    state.status.active_button = state.aka[page]
    const active_id = state.status.active_button
    const be_channel = state.net[active_id]
    const up_channel = state.net[state.aka.up]

    // APPLY OPTS (1):
    // @TODO: issue: how to submit an `onclick` event to trigger the initial change?

    const [by, to, mid] = [id, id, 0]
    let message = { head: [by, to, mid], type: 'init' }
    do_page_change(page, message.head, { be_channel, up_channel })
  }
  function handle_active_change (message) { // handle on
    const { data: active_page } = message

    console.log('INITIALIZE', {active_page, active_id: state.aka[active_page] })

    state.status.active_button = state.aka[active_page]
    // APPLY OPTS (2):
    // @TODO: PROBLEM: this makes navbar know what is active, but it doesnt highlight it yet
  }
  function navigation_protocol (petname) {
    return function protocol (send) {
      const on = { 'click': onclick }
      state.net[send.id] = { mid: 0, send, on }
      state.aka[petname] = send.id
      return Object.assign(listen, { id })
      // APPLY OPTS (3):
      // @INFO: onclick is for later
      // @TODO: but init should set itself active -> apply OPTS
      // => (e.g. page === petname): trigger active + trigger parent to show content
      // ALSO: opts should be "asked for" instead
      // ALSO: take care of problems of order in which things get applied synchronously... test for it!       
      function invalid (message) { console.error('invalid type', message) }
      function listen (message) {
        console.log(`[${id}]\n${petname}:`, message)
        const { on } = state.net[state.aka[petname]]
        const action = on[message.type] || invalid
        action(message)
      }
      function onclick (message) { // receive click from a button -> that button will become active!
        const active_id = state.status.active_button
        const default_id = state.aka[page] // only exists because it got initialized first (timing issue?)
        if (active_id === send.id && active_id === default_id) return // means default is already active
        // @TODO: maybe change logic to be able to toggle an "empty desktop" too?
        const [
          next_id, data
        ] = active_id === send.id ? [default_id, page] : [send.id, petname]
        const be_channel = state.net[next_id]
        const ex_channel = state.net[active_id] // active button
        const up_channel = state.net[state.aka.up] // parent element
        do_page_change(data, message.head, { be_channel, ex_channel, up_channel })
      }
    }
  }
  function do_page_change (page, head, { be_channel, ex_channel, up_channel }) {
    if (be_channel) be_channel.send({ // new active nav button
      head: [id, be_channel.send.id, be_channel.mid++],
      refs: { cause: head },
      type: 'activate',
    })
    if (ex_channel) ex_channel.send({ // old active nav button
      head: [id, ex_channel.send.id, ex_channel.mid++],
      refs: { cause: head },
      type: 'inactivate',
    })
    if (up_channel) up_channel.send({ // send parent to update page content
      head: [id, up_channel.send.id, up_channel.mid++],
      refs: { cause: head },
      type: 'handle_page_change',
      data: page
    })
    state.status.active_button = be_channel.send.id
  }
}
function get_theme () {
  return`
    .navbar_wrapper {
      container-type: inline-size;
      width: 100%;
      .navbar {
        display: block;
        width: 100%;
        height: 40px;
        overflow: hidden;
        border-bottom: 1px solid var(--primary_color);
        --s: 15px; /* control the size */
        --_g: var(--bg_color) /* first color */ 0 25%, #0000 0 50%;
        background:
            repeating-conic-gradient(at 33% 33%,var(--_g)),
            repeating-conic-gradient(at 66% 66%,var(--_g)),
            var(--primary_color);  /* second color */
        background-size: var(--s) var(--s);
        &.active {
          height: max-content;
        }
        .nav_toggle_wrapper {
          display: flex;
          width:1 00%;
          justify-content: stretch;
          .logo_wrapper{
            width: 100% !important;
            flex-grow: 1;
          }
          .nav_toggle {
            display: block;
          }
        }
        .page_btns_wrapper {
          width: 100%;
          display: flex;
          flex-direction: column;
          .text_button_wrapper {
            width: 100%;
            flex-grow: 1;
          }
        }
        .icon_btn_wrapper {
          display: flex;
          justify-content: flex-start;
        }
      }
    }
    @container(min-width: 899px) {
      .navbar_wrapper {
        .navbar {
          display: flex;
          .nav_toggle_wrapper {
            width: max-content;
            display: flex;
            .logo_wrapper {
              width: max-content !important;
            }
            .nav_toggle {
              display: none;
            }
          }
          .page_btns_wrapper {
            flex-direction: row;
            .text_button_wrapper {
              width: max-content !important;
              flex-grow: unset;
            }
          }
        }
      }
    }
  `
}