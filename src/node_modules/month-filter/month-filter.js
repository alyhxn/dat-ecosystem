const month_card = require('month-card')
const scrollbar = require('scrollbar')
/******************************************************************************
  MONTH FILTER COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = month_filter
// ----------------------------------------
function month_filter (opts = default_opts, protocol) {
  // ----------------------------------------
  // RESOURCE POOL (can't be serialized)
  // ----------------------------------------
  const ro = new ResizeObserver(entries => {
    console.log('ResizeObserver:terminal:resize')
    const scroll_channel = state.net[state.aka.scrollbar]
    scroll_channel.send({
      head: [id, scroll_channel.send.id, scroll_channel.mid++],
      refs: { },
      type: 'handle_scroll',
    })
  })
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  let active_month = ''
  let active_day = ''
  let active_date_prev = []
  const month_buttons = {}
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  const month_data = [
    { name: 'January', days: 31 },
    { name: 'February', days: 28 },
    { name: 'March', days: 31 },
    { name: 'April', days: 30 },
    { name: 'May', days: 31 },
    { name: 'June', days: 30 },
    { name: 'July', days: 31 },
    { name: 'August', days: 31 },
    { name: 'September', days: 30 },
    { name: 'October', days: 31 },
    { name: 'November', days: 30 },
    { name: 'December', days: 31 },
  ]
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = { 'update_calendar': update_calendar }
  const up_channel = use_protocol('up')({ protocol, state, on })

  function update_calendar ({ data }) {
    active_date_prev.forEach(date => {
      const petname = `month_${new Date(date).getMonth()}`
      const channel = state.net[state.aka[petname]]
      channel.send({
        head: [id, channel.send.id, channel.mid++],
        type: 'toggle_day_highlight',
        data: { mode: 'remove_highlight', date }
      })
    })
    active_date_prev = data
    data.forEach(date => {
      const petname = `month_${new Date(date).getMonth()}`
      const channel = state.net[state.aka[petname]]
      channel.send({
        head: [id, channel.send.id, channel.mid++],
        type: 'toggle_day_highlight',
        data: { mode: 'add_highlight', date }
      })
    })
  }
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="scrollbar_wrapper">
    <div class="month_filter_wrapper"></div>
    <div class="scrollbar-wrapper"></div>
  </div>`
  const month_filter_wrapper = shadow.querySelector('.month_filter_wrapper')
  const scrollbar_wrapper = shadow.querySelector('.scrollbar-wrapper')
  // ----------------------------------------
  const scrollbar_wrapper_shadow = scrollbar_wrapper.attachShadow(shopts)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // month cards
    function make_card (month, i) {
      const on = {
        'toggle_month_button': toggle_month_button,
        'toggle_day_button': toggle_day_button
      }
      const petname = `month_${i}`
      const protocol = use_protocol(petname)({ state, on })
      const opts = month
      const element = shadowfy()(month_card(opts, protocol))
      const channel = state.net[state.aka[petname]]
      return element
    }
    const elements = month_data.map(make_card)
    month_filter_wrapper.append(...elements)
    async function toggle_month_button (message) {
      const { head: [by] } = message
      if (active_month) {
        const active_channel = state.net[active_month]
        active_channel.send({
          head: [id, active_channel.send.id, active_channel.mid++],
          type: 'toggle_month_button',
          data: ''
        })
      }
      if (active_month !== by) {
        const by_channel = state.net[by]
        by_channel.send({
          head: [id, by_channel.send.id, by_channel.mid++],
          type: 'toggle_month_button',
          data: ''
        })
      }
      const value = active_month = active_month === by ? '' : by
      up_channel.send({
        head: [id, up_channel.send.id, up_channel.mid++],
        type: 'set_scroll',
        data: { filter: 'MONTH', value }
      })
    }
    async function toggle_day_button (message) {
      const { data } = message
      toggle_month_button({ head: [active_month] })
      if (active_day && active_day !== data) {
        const key = `month_card-${new Date(active_day).getMonth()}`
        const channel = state.net[state.aka[key]]
        if (!channel) return
        channel.send({
          head: [id, channel.send.id, channel.mid++],
          type: 'toggle_all_days',
          data: active_day
        })
      }
      const value = active_day = active_day === data ? '' : data
      up_channel.send({
        head: [id, up_channel.send.id, up_channel.mid++],
        type: 'set_scroll',
        data: { filter: 'DATE', value }
      })
    }
  }
  { // scrollbar
    const on = { 'set_scroll': on_set_scroll, status: onstatus }
    const protocol = use_protocol('scrollbar')({ state, on })
    opts.horizontal = true
    opts.data.img_src.icon_arrow_start = data.img_src.icon_arrow_left
    opts.data.img_src.icon_arrow_end = data.img_src.icon_arrow_right  
    const scroll_opts = opts 
    const element = scrollbar(scroll_opts, protocol)

    ro.observe(scrollbar_wrapper)
    month_filter_wrapper.onscroll = onscroll

    scrollbar_wrapper_shadow.append(element)
    
    function onscroll (event) {
      const scroll_channel = state.net[state.aka.scrollbar]
      scroll_channel.send({
        head: [id, scroll_channel.send.id, scroll_channel.mid++],
        refs: { },
        type: 'handle_scroll',
      })
    }
    function on_set_scroll (message) {
      console.log('set_scroll', message) 
      setScrollLeft(message.data)
    }
    const channel = state.net[state.aka.scrollbar]
    function onstatus (message) {
      channel.send({
        head: [id, channel.send.id, channel.mid++],
        refs: { cause: message.head },
        type: 'update_size',
        data: {
          sh: month_filter_wrapper.scrollWidth, 
          ch: month_filter_wrapper.clientWidth, 
          st: month_filter_wrapper.scrollLeft
        }
      })
    }
    async function setScrollLeft (value) {
      month_filter_wrapper.scrollLeft = value
    }
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------
  
  return el
}
function get_theme () {
  return `
    .month_filter_wrapper {
      display: flex;
      height: 131px;
      width: 100%;
      border: 1px solid var(--primary_color);
      border-width: 1px 1px 3px 1px;
      overflow-x: scroll;
      overflow-y: hidden;
      scrollbar-width:none;
    }
    ::-webkit-scrollbar {
      display: none;
    } 
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}