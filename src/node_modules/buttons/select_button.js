module.exports = select_button


const path = require('path')
const cwd = process.cwd()
const prefix = path.relative(cwd, __dirname)

// CSS Boiler Plat
const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)

function select_button (opts, protocol) {
    const notify = protocol(null, listen)
    let message = {
        head: ['select_button', 'project_filter', 'project_filter'],
        type: 'setFilter',
    }

    const {data} = opts
    // Assigning all the icons
    const {img_src} = data
    const {
        icon_arrow_down,
        icon_arrow_up
    } = img_src

    const el = document.createElement('div')
    const shadow = el.attachShadow( { mode:`closed` } )
    shadow.innerHTML = `
        <div class="select_button_wrapper bottom">
            <div class="option_wrapper">
                ${opts.choices.map(choice => `<div class="option">${choice}</div>`).join('')}
            </div>
            <div class="button_wrapper">
                <span class="button_name">${opts.name}: </span>
                <span class="selected_option">${'NULL'}</span>
                <span class="arrow_icon">
                    ${icon_arrow_up}
                </span>
            </div>
        </div>
        <style> ${get_theme()} </style>
    `

    // Adding Select Toggle function
    const select_toggle_btn = shadow.querySelector('.button_wrapper')
    let active_state = true;
    select_toggle_btn.onclick = (e) => {
        shadow.querySelector('.select_button_wrapper').classList.toggle('active');
        ;(active_state)?shadow.querySelector('.arrow_icon').innerHTML = icon_arrow_down: shadow.querySelector('.arrow_icon').innerHTML = icon_arrow_up
        active_state = !active_state
    }
    // select_toggle_btn.addEventListener('click', function() {
    //     shadow.querySelector('.select_button_wrapper').classList.toggle('active');
    // });


    // Use event delegation
    // document.addEventListener('click', (e) => {
    //     console.log(e.target.className);
    // });

    // Select all .option divs
    const options = shadow.querySelectorAll('.option')
    const selected_option = shadow.querySelector('.selected_option')

    // Attach click event listener to each .option div
    options.forEach((option) => {
        option.addEventListener('click', () => {
            if (!option.classList.contains('active')) {
                // Add 'active' class to the clicked option
                option.classList.add('active')
                // Remove 'active' class from other options
                options.forEach((other_option) => {
                    if (other_option !== option) {
                        other_option.classList.remove('active')
                    }
                });
            } else {
                // Remove 'active' class from the clicked option
                option.classList.remove('active')
                selected_option.innerHTML = 'NULL'
            }

            // Update the selected_option innerHTML
            const active_options = shadow.querySelectorAll('.option.active')
            if (active_options.length > 0) {
                selected_option.innerHTML = active_options[0].innerHTML
            }
            shadow.querySelector('.select_button_wrapper').classList.toggle('active')
            message['data'] = {filter: opts.name, value:selected_option.innerHTML}
            notify(message)
        })
    })


    // shadow.append(main, navbar(opts, protocol))
    shadow.adoptedStyleSheets = [sheet]
    return el

    function listen(message){
        // const {head, type, data} = message
        // const [by, to, id] = head
        // if( to !== id) return console.error('address unknown', message)
    }
}

function get_theme(){
    return`
        .select_button_wrapper{
            box-sizing: border-box;
            position: relative;
            z-index:100;
            width: 100%;
            height: 30px;
            font-size: 0.875em;
            line-height: 1.5em;
            background-color: var(--bg_color);
        }
        .select_button_wrapper.active .option_wrapper{
            display: block !important;
        }
        
        .option_wrapper{
            position: absolute;
            display: none;
            box-sizing: border-box;
            height: max-content;
            max-height: 400px;
            width: 100%;
            background-color: var(--bg_color);
            border: 1px solid var(--primary_color);
        }
        .select_button_wrapper.bottom .option_wrapper{
            bottom: 30px;
            left: 0px;
        }
        .select_button_wrapper.top .option_wrapper{
            /* top: 40px; */
            left: 0px;
        }
        .option_wrapper.top{
            /* bottom: 40px; */
            left: 0px;
        }
        .option{
            box-sizing: border-box;
            display: flex;
            gap:5px;
            align-items:center;
            padding: 10px 5px;
            cursor: pointer;
            background-color: var(--bg_color);
        }
        .option.active{
            background-color: var(--ac-1);
            color: var(--primary_color);
        }
        .option:hover{
            filter: brightness(0.8);
        }
        .select_button_wrapper.active .button_wrapper{
            border: 2px solid var(--ac-1);
        }
        .button_wrapper{
            box-sizing: border-box;
            display: flex;
            align-items: center;
            gap:5px;
            padding: 5px 5px;
            cursor: pointer;
            height: 30px;
            background-color: var(--bg_color);
            border: 1px solid var(--primary_color);
        }
        .button_name{ 
            display: flex;
            vertical-align: middle;
            font-weight: 700;
            line-height: 15px;
            letter-spacing: -1px;
        }
        .selected_option{ 
            display: flex;
            vertical-align: middle;
            font-weight: 300;
            line-height: 15px;
            letter-spacing: -1px;
        }
        .arrow_icon{
            display: flex;
            align-items: center;
            margin-left: auto;
        }

    `
}