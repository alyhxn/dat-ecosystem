const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
/******************************************************************************
  TAB BUTTON COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const default_opts = { name: '' }

module.exports = tab_button

function tab_button (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { img_src : {
    icon_close_dark= `${prefix}/icon_close_dark.svg`,
  }} = opts.data
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = { 'activate': toggle_class, 'inactivate': toggle_class }
  const send = protocol(Object.assign(listen, { id }))
  const up_channel = state.net[send.id] = { mid: 0, send, on } // store channel
  state.aka.up = send.id
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `<div class="tab_button">
    <div class="text_wrapper"> ${opts.name} </div>
    <div class="close_button"> ${icon_close_dark} </div>
  </div>`
  shadow.adoptedStyleSheets = [sheet]
  const tab_button = shadow.querySelector('.tab_button')
  const text_wrapper = shadow.querySelector('.text_wrapper')
  const close_btn = shadow.querySelector('.close_button')
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  text_wrapper.onclick = onclick
  close_btn.onclick = onclose
  // ----------------------------------------
  // INIT
  // ----------------------------------------
  toggle_class({ type: 'activate' })

  return el

  function toggle_class ({ type }) {
    const mode = type === 'activate'
    tab_button.classList.toggle('active', mode)
  }
  function invalid (message) { console.error('invalid type', message) }
  function listen (message) {
    console.log(`[${id}]`, message)
    const { on } = up_channel
    const action = on[message.type] || invalid
    action(message)
  }
  function onclose (event) {
    el.remove()
    const head = [id, up_channel.send.id, up_channel.mid++]
    send({ head, type: 'close' })
  }
  function onclick (e) {
    const head = [id, up_channel.send.id, up_channel.mid++]
    send({ head, type: 'click' })
  }
}
function get_theme () {
  return `
    .tab_button {
      display: flex;
      cursor: pointer;
      box-sizing: border-box;
      border: 1px solid var(--primary_color);
      background-color: var(--bg_color);
      color: var(--primary_color);
      align-items: center;
      justify-content: center;
      padding: 0 5px;
      height: 30px;
      width: 100%;
      .text_wrapper {
        text-align: center;
        font-size: 0.875em;
        line-height: .5em;
        padding: 12px 0;
        height :30px;
        box-sizing: border-box;
        width: 90px;
      }
      .close_button {
        display: flex;
        justify-content: center;
        align-items: center;
      }
      &.active {
        background-color: var(--primary_color);
        color: var(--bg_color);
        svg path {
          fill: var(--bg_color)
        }
      }
    }
  `
}