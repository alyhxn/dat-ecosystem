
const sheet = new CSSStyleSheet

sheet.replaceSync(get_theme())
/******************************************************************************
  TEXT COMPONENT
******************************************************************************/
var count = 0
const ID = __filename
const STATE = { ids: {}, hub: {} } // all state of component module
// ----------------------------------------

module.exports = text_button

function text_button (opts, protocol) {
  // ----------------------------------------
  // INSTANCE STATE & ID
  const id = `${ID}:${count++}` // assigns their own name
  const state = STATE.ids[id] = { wait: {}, hub: {}, aka: {} } // all state of component instance
  // ----------------------------------------
  const { text } = opts
  // ----------------------------------------
  // protocol
  const [send, parent_name] = protocol(listen, id)
  function listen (message) {
    const { head, refs, type, data, meta } = message
    const [by, to, id] = head
    text_button.classList.toggle('active', data === text)
  }
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `<div class="text_button">${opts.text}</div>`
  const [text_button] = shadow.children
  text_button.onclick = toggle_class
  shadow.adoptedStyleSheets = [sheet]
  return el

  function toggle_class (e) {
    const page = text_button.classList.contains('active') ? 'DEFAULT' : text
    let message = {
      head: { by: id, to: parent_name, mid: 0 },
      type: 'handle_page_change',
      data: page
    }
    send(message)
  }
}
function get_theme () {
  return`
    .text_button {
      text-align: center;
      font-size: 0.875em;
      line-height: 1.5714285714285714em;
      padding: 10px 5px;
      height: 40px;
      box-sizing: border-box;
      width: 100%;
      cursor: pointer;
      border: 1px solid var(--primary_color);
      background-color: var(--bg_color);
      color: var(--primary_color);
    }
    .text_button.active {
      background-color: var(--ac-1);
      color: var(--primary_color);
    }
  `
}