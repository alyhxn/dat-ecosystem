const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
/******************************************************************************
  ICON BUTTON COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const default_opts = { }

module.exports = icon_button

function icon_button (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = { active: true }
  const state = STATE.ids[id] = { status, wait: {}, net: {}, aka: {} } // all state of component instance
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { src = '', src_active = '' } = opts
  const $src = src // @TODO: make those subscribable signals
  const $src_acitve = src_active
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = { 'activate': onactivate, 'inactivate': oninactivate }
  const send = protocol(Object.assign(listen, { id }))
  function invalid (message) { console.error('invalid type', message) }
  function listen (message) {
    console.log(`[${id}]`, message)
    const action = on[message.type] || invalid
    action(message)
  }
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="icon_btn"></div>`
  const icon_button = shadow.querySelector('.icon_btn')
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  const [svg_icon, svg_active] = Object.assign(document.createElement('div'), {
    innerHTML: `${src} ${src_active}` // svg icons
  }).children
  icon_button.append(svg_icon)
  // Toggle Icon
  icon_button.onclick = onclick
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el

  function oninactivate () {
    state.status.active = false
    icon_button.classList.toggle('active', state.status.active)
    if (svg_active) icon_button.replaceChildren(svg_icon)
  }
  function onactivate () {
    state.status.active = true
    icon_button.classList.toggle('active', state.status.active)
    if (svg_active) icon_button.replaceChildren(svg_active)
  }
  function onclick (e) {
    const [by, to, mid] = [id, send.id, 0]
    const message = { head: [by, to, mid], type: 'click' }
    send(message)
  }
}
function get_theme () {
  return `
    .icon_btn {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 40px;
      box-sizing: border-box;
      aspect-ratio: 1/1;
      cursor: pointer;
      border: 1px solid var(--primary_color);
      background-color: var(--bg_color);
      svg {
        height: 25px;
        width: 25px;
        pointer-events: none;
      }
      &.active {
        background-color: var(--ac-2)
      }
    }
  `
}