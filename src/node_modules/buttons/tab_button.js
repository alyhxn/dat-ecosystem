// CSS Boiler Plat
const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)

let id = 0

module.exports = tab_button

function tab_button (props, protocol) {
  const name = `tab_button-${id++}`
  const notify = protocol({ from: name }, listen)
  const { data } = props
  const { img_src : {
    icon_close_dark= `${prefix}/icon_close_dark.svg`,
  }} = data

  const el = document.createElement('div')
  const shadow = el.attachShadow({mode:'closed'})
  shadow.innerHTML = `
    <div class="tab_button">
      <div class="text_wrapper"> ${props.name} </div>
      <div class="close_button"> ${icon_close_dark} </div>
    </div>
    <style> ${get_theme()} </style>
  `
  const tab_button = shadow.querySelector('.tab_button')
  const text_wrapper = shadow.querySelector('.text_wrapper')
  text_wrapper.onclick = (e) => {
    toggle_class()
    notify({
      head: { by: name, to: 'terminal', mid: 0 },
      type: 'tab_btn_click',
      data: el.id
    })
  }
  toggle_class()
  const close_btn = shadow.querySelector('.close_button')
  close_btn.onclick = () => {
    el.remove()
    notify({
      head: { by: name, to: 'terminal', mid: 0 },
      type: 'close_tab',
      data: el.id
    })
  }
  shadow.adoptedStyleSheets = [sheet]

  return el

  function toggle_class () {
    tab_button.classList.toggle('active')
  }
  function listen (message) {
    toggle_class()
  }
}
function get_theme () {
  return`
    .tab_button {
      display: flex;
      cursor: pointer;
      box-sizing: border-box;
      border: 1px solid var(--primary_color);
      background-color: var(--bg_color);
      color: var(--primary_color);
      align-items: center;
      justify-content: center;
      padding: 0 5px;
      height: 30px;
      width: 100%;
      .text_wrapper {
        text-align: center;
        font-size: 0.875em;
        line-height: .5em;
        padding: 12px 0;
        height :30px;
        box-sizing: border-box;
        width: 90px;
      }
      .close_button {
        display: flex;
        justify-content: center;
        align-items: center;
      }
      &.active {
        background-color: var(--primary_color);
        color: var(--bg_color);
        svg path {
          fill: var(--bg_color)
        }
      }
    }
  `
}