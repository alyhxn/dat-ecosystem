/******************************************************************************
 SM ICON BUTTON COMPONENT
 ******************************************************************************/
 // ----------------------------------------
 // MODULE STATE & ID
 var count = 0
 const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
 const ID = dir.slice(cwd.length)
 const STATE = { ids: {}, net: {} } // all state of component module
 // ----------------------------------------
 const sheet = new CSSStyleSheet
 sheet.replaceSync(get_theme())
 const default_opts = { }
 const shopts = { mode: 'closed' }
 // ----------------------------------------
 module.exports = sm_icon_button
 // ----------------------------------------
 function sm_icon_button (opts = default_opts, protocol) {
   // ----------------------------------------
   // ID + JSON STATE
   // ----------------------------------------
   const id = `${ID}:${count++}` // assigns their own name
   const status = {}
   const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
   const cache = resources({})
   let activeState = true
   // ----------------------------------------
   // OPTS
   // ----------------------------------------
   let { src, src_active, activate, link } = opts
   // ----------------------------------------
   // PROTOCOL
   // ----------------------------------------
   const on = {}
   const channel = use_protocol('up')({ protocol, state , on })
   // ----------------------------------------
   // TEMPLATE
   // ----------------------------------------
   const el = document.createElement('div')
   const shadow = el.attachShadow(shopts)
   shadow.adoptedStyleSheets = [sheet]
   ; link ? shadow.innerHTML = `<div class="sm_icon_button">
     <a target="_blank" href=${link}>${src}</a>
   </div>` :
    shadow.innerHTML = `<div class="sm_icon_button">${src}</div>` 
   const sm_icon_button = shadow.querySelector(".sm_icon_button")
   // ----------------------------------------
   // ELEMENTS
   // ----------------------------------------
   sm_icon_button.onclick = toggle_class
   // ----------------------------------------
   // INIT
   // ----------------------------------------
 
   return el
 
   function toggle_class (e) {
     if (activate) {
       if (src_active) {
         sm_icon_button.innerHTML = activeState ? src_active: src
         activeState = !activeState
       }
       let selector = e.target.classList
       selector.toggle('active', !selector.contains('active'))  
     }
     channel.send({
       head: [id, channel.send.id, channel.mid++],
       type: 'click'
     })
   }
 }
 function get_theme () {
   return `
     .sm_icon_button {
       display: flex;
       justify-content: center;
       align-items: center;
       height: 30px;
       box-sizing: border-box;
       aspect-ratio: 1/1;
       cursor: pointer;
       border: 1px solid var(--primary_color);
       background-color: var(--bg_color);
     }
     .sm_icon_button.active {
       background-color: var(--ac-2)
     }
     .sm_icon_button svg, .sm_icon_button svg * {
       pointer-events:none;
       fill: var(--primary_color);
     }
   `
 }
 // ----------------------------------------------------------------------------
 function shadowfy (props = {}, sheets = []) {
   return element => {
     const el = Object.assign(document.createElement('div'), { ...props })
     const sh = el.attachShadow(shopts)
     sh.adoptedStyleSheets = sheets
     sh.append(element)
     return el
   }
 }
 function use_protocol (petname) {
   return ({ protocol, state, on = { } }) => {
     if (petname in state.aka) throw new Error('petname already initialized')
     const { id } = state
     const invalid = on[''] || (message => console.error('invalid type', message))
     if (protocol) return handshake(protocol(Object.assign(listen, { id })))
     else return handshake
     // ----------------------------------------
     // @TODO: how to disconnect channel
     // ----------------------------------------
     function handshake (send) {
       state.aka[petname] = send.id
       const channel = state.net[send.id] = { petname, mid: 0, send, on }
       return protocol ? channel : Object.assign(listen, { id })
     }
     function listen (message) {
       const [from] = message.head
       const by = state.aka[petname]
       if (from !== by) return invalid(message) // @TODO: maybe forward
       console.log(`[${id}]:${petname}>`, message)
       const { on } = state.net[by]
       const action = on[message.type] || invalid
       action(message)
     }
   }
 }
 // ----------------------------------------------------------------------------
 function resources (pool) {
   var num = 0
   return factory => {
     const prefix = num++
     const get = name => {
       const id = prefix + name
       if (pool[id]) return pool[id]
       const type = factory[name]
       return pool[id] = type()
     }
     return Object.assign(get, factory)
   }
 }