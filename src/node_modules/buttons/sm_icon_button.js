// CSS Boiler Plat
const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)

module.exports = sm_icon_button

// Props - icon/img src
function sm_icon_button (props) {
  let { src, src_active, activate } = props
  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode:'closed' })
  shadow.innerHTML = `
    <div class="sm_icon_button">
      ${src}
    </div>
  `
  const sm_icon_button = shadow.querySelector(".sm_icon_button")
  // Toggle Icon
  if(activate) {
    if (src_active) {
      let activeState = true
      sm_icon_button.onclick = (e) =>{
        ;(activeState)?sm_icon_button.innerHTML = src_active: sm_icon_button.innerHTML = src
        activeState = !activeState
        toggle_class(e)
      }
    } else sm_icon_button.onclick = toggle_class
  }
  const style = document.createElement('style')
  style.textContent = get_theme()
  shadow.append(sm_icon_button, style)
  shadow.adoptedStyleSheets = [sheet]
  
  return el

  function toggle_class (e) {
    let selector = e.target.classList
    ;( selector.contains('active') ) ? selector.remove('active') : selector.add('active')
  }
}
function get_theme () {
  return`
    .sm_icon_button {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 30px;
      box-sizing: border-box;
      aspect-ratio: 1/1;
      cursor: pointer;
      border: 1px solid var(--primary_color);
      // border-left: var(--bg_color);
      background-color: var(--bg_color);
      &.active {
        background-color: var(--ac-2)
      }
      svg, svg * {
        pointer-events:none !important;
      }
    }
  `
}