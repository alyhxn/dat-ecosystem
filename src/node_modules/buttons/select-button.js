const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
/******************************************************************************
  SELECT BUTTON COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const default_opts = { }

module.exports = select_button

function select_button (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = count++
  let active_option = ''
  let active_state = true
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  // Assigning all the icons
  const { img_src } = data
  const {
    icon_arrow_down,
    icon_arrow_up
  } = img_src
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const notify = protocol(null, listen)
  let message = {
    head: ['select_button', 'project_filter', 'project_filter'],
    type: 'setFilter',
  }
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode:`closed` })
  shadow.innerHTML = `<div class="select_button_wrapper bottom">
    <div class="option_wrapper">
      ${opts.choices.map(choice => `<div class="option">${choice}</div>`).join('')}
    </div>
    <div class="button_wrapper">
      <span class="button_name">${opts.name}: </span>
      <span class="selected_option">${'NULL'}</span>
      <span class="arrow_icon">
        ${icon_arrow_up}
      </span>
    </div>
  </div>`
  shadow.adoptedStyleSheets = [sheet]
  const select_button_wrapper = shadow.querySelector('.select_button_wrapper')
  const select_toggle_btn = shadow.querySelector('.button_wrapper')
  const options = shadow.querySelectorAll('.option')
  const selected_option = shadow.querySelector('.selected_option')
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  select_toggle_btn.onclick = (e) => {
    select_button_wrapper.classList.toggle('active')
    shadow.querySelector('.arrow_icon').innerHTML = active_state ? icon_arrow_down : icon_arrow_up
    active_state = !active_state
  }
  // select_toggle_btn.addEventListener('click', function() {
  //   shadow.querySelector('.select_button_wrapper').classList.toggle('active')
  // })
  // Use event delegation
  // document.addEventListener('click', (e) => {
  //   console.log(e.target.className)
  // })
  // Select all .option divs
  // Attach click event listener to each .option div
  options.forEach((option) => {
    option.addEventListener('click', () => {
      if (active_option) active_option.classList.remove('active')
      if (active_option === option) {
        selected_option.innerHTML = 'NULL'
        active_option = ''
      }
      else {
        option.classList.add('active')
        selected_option.innerHTML = option.innerHTML
        active_option = option
      }
      select_button_wrapper.classList.remove('active')
      message['data'] = { filter: opts.name, value: selected_option.innerHTML }
      notify(message)
    })
  })
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el

  function listen (message) {
    // const {head,  refs, type, data, meta} = message
    // const [by, to, id] = head
    // if( to !== id) return console.error('address unknown', message)
  }
}
function get_theme () {
  return `
    .select_button_wrapper {
      box-sizing: border-box;
      position: relative;
      z-index: 100;
      width: 100%;
      height: 30px;
      font-size: 0.875em;
      line-height: 1.5em;
      background-color: var(--bg_color);
      &.bottom {
        .option_wrapper {
          bottom: 30px;
          left: 0px;
        }
      }
      &top {
        .option_wrapper {
          /* top: 40px; */
          left: 0px;
        }
      }
      &.active {
        .option_wrapper{ display: block !important; }
        .button_wrapper{ border: 2px solid var(--ac-1); }
      }
      .option_wrapper {
        position: absolute;
        display: none;
        box-sizing: border-box;
        height: max-content;
        max-height: 400px;
        width: 100%;
        background-color: var(--bg_color);
        border: 1px solid var(--primary_color);
        .option {
          box-sizing: border-box;
          display: flex;
          gap: 5px;
          align-items: center;
          padding: 10px 5px;
          cursor: pointer;
          background-color: var(--bg_color);
          &.active {
            background-color: var(--ac-1);
            color: var(--primary_color);
          }
          &:hover {
            filter: brightness(0.8);
          }
        }
      }
      .button_wrapper {
        box-sizing: border-box;
        display: flex;
        align-items: center;
        gap: 5px;
        padding: 5px 5px;
        cursor: pointer;
        height: 30px;
        background-color: var(--bg_color);
        border: 1px solid var(--primary_color);
        .button_name { 
          display: flex;
          vertical-align: middle;
          font-weight: 700;
          line-height: 15px;
          letter-spacing: -1px;
        }
        .selected_option { 
          display: flex;
          vertical-align: middle;
          font-weight: 300;
          line-height: 15px;
          letter-spacing: -1px;
        }
        .arrow_icon {
          display: flex;
          align-items: center;
          margin-left: auto;
        }
      }
    }
  `
}