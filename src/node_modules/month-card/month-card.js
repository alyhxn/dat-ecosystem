const day_button = require('buttons/day-button')
/******************************************************************************
  MONTH CARD COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = month_card
// ----------------------------------------
function month_card (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { name: label, days } = opts
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = {
    toggle_month_button,
    toggle_all_days,
    toggle_day_highlight,
    toggle_day_button_visibility,
  }
  const up_channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="month_card">
    <span class="month_name"><b>${label}</b></span>
    <div class="days_wrapper"></div>
  </div>`
  const days_wrapper = shadow.querySelector('.days_wrapper')
  const month_name = shadow.querySelector('.month_name')
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // day buttons
    const elements = []
    for (let i = 1; i <= days; i++) {
      const petname = `day_${i}`
      const on = { toggle_day_button }
      const protocol = use_protocol(petname)({ state, on })
      const opts = { i }
      const element = shadowfy()(day_button(opts, protocol))
      elements.push(element)
      async function toggle_day_button ({ data }) {
        up_channel.send({
          head: [id, up_channel.send.id, up_channel.mid++],
          type: 'toggle_day_button',
          data: label + ' ' + ('0' + i).slice(-2)
        })
      }
    }
    days_wrapper.append(...elements)
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------
  month_name.onclick = onclick

  return el

  function onclick (e) {
    toggle_month_button()
    up_channel.send({
      head: [id, up_channel.send.id, up_channel.mid++],
      type: 'toggle_month_button',
      data: label
    })
  }
  async function toggle_month_button () {
    month_name.classList.toggle('active')
  }
  async function toggle_all_days ({ data }) {
    let day = new Date(data).getDate()
    if(!day){
      day = new Date(data + ', 2000').getDate()
    }
    const petname = `day_${day}`
    const channel = state.net[state.aka[petname]]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'toggle_active',
      data: ''
    })
  }
  async function toggle_day_highlight ({ data }) {
    const { mode, date } = data
    const day = new Date(date).getDate()
    const petname = `day_${day}`
    const channel = state.net[state.aka[petname]]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: mode,
      data: ''
    })
  }

  async function toggle_day_button_visibility ({ data }) {
    const petname = 'day_29'
    const channel = state.net[state.aka[petname]]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'toggle_visibility',
      data
    })
  }
}
function get_theme () {
  return `
    .month_card {
      width: 140px;
      border: 1px solid var(--primary_color);
      background-image: radial-gradient(var(--bg_color_3) 1px, var(--bg_color_2) 2px);
      background-size: 8px 8px;
      min-height:130px;
      height:100%;
    }
    .month_card .month_name {
      display: block;
      text-align: center;
      padding: 5px 0;
      cursor: pointer;
      box-size: border-box;
      border: 0px solid var(--primary_color);
      border-width: 0 1px 2px 0;
      background-color:var(--bg_color);
    }
    .month_card .month_name.active {
      background-color: var(--ac-1)
    }
    .month_card .days_wrapper {
      display: flex;
      flex-wrap: wrap;
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}