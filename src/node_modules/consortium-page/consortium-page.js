const mission_statement = require('manifesto/manifesto')
const important_documents = require('important-documents')
const our_members = require('our-members')
const tools = require('tools')
const app_icon = require('app-icon')
/******************************************************************************
  WINDOW BAR COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = consortium_page
// ----------------------------------------
function consortium_page (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  // Image data
  const { data } = opts
  const { img_src } = data
  const {
    icon_pdf_reader,
    icon_folder,
  } = img_src
  const icons_data = [{
    name: 'manifesto',
    type: '.md',
    img: icon_pdf_reader,
  },{
    name: 'important_documents',
    type: '.md',
    img: icon_pdf_reader,
  },{
    name: 'our_members',
    type: '.md',
    img: icon_pdf_reader,
  },{
    name: 'tools',
    type: '/', // folder
    img: icon_folder,
  }]
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = {
    'open_important_documents': open_important_documents
  }
  const channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="main_wrapper">
    <div class="icon_wrapper"></div>
    <div class="popup_wrapper">
      <div class="mini_popup_wrapper"></div>
    </div>
  </div>`
  const popup_wrapper = shadow.querySelector('.popup_wrapper')
  const mini_popup_wrapper = shadow.querySelector('.mini_popup_wrapper')
  const icon_wrapper = shadow.querySelector('.icon_wrapper')
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // desktop icons
    const on = {}
    function make_element (icon_data, i) {
      const { name, type, img: source } = icon_data
      const label = `${name}${type}`
      const protocol = use_protocol(label)({ state, on })
      const opts = { source, label }
      const element = shadowfy()(app_icon(opts, protocol))
      const onclick = show(label)
      element.ondblclick = onclick // () => {PROTOCOLS['notify_'+window]()}
      element.ontouchend = onclick // () => {PROTOCOLS['notify_'+window]()}
      return element
      function show (label) {
        return event => {
          const channel = state.net[state.aka[name]]
          channel.send({
            head: [id, channel.send.id, channel.mid++],
            type: 'show'
          })
        }
      }
    }
    const elements = icons_data.map(make_element)
    icon_wrapper.append(...elements)
  }
  const program = cache({
    'HOME': () => home_page({ data: current_theme }, use_protocol('home_page')({ state })),
    'PROJECTS': () => projects_page({ data: current_theme }, use_protocol('projects_page')({ state })),
    'GROWTH PROGRAM': () => growth_page({ data: current_theme }, use_protocol('growth_page')({ state })),
    'TIMELINE': () => timeline_page({ data: current_theme }, use_protocol('timeline_page')({ state })),
    'CONSORTIUM': () => consortium_page({ data: current_theme }, use_protocol('consortium_page')({ state })),
  })
  { // important documents
    const { name: petname } = important_documents
    const protocol = use_protocol(petname)({ state })
    const opts = { data }
    const element = shadowfy()(important_documents(opts, protocol))
    mini_popup_wrapper.append(element)
  }
  { // our members
    const { name: petname } = our_members
    const protocol = use_protocol(petname)({ state })
    const opts = { data }
    const element = shadowfy()(our_members(opts, protocol))
    mini_popup_wrapper.append(element)
  }
  { // tools
    const { name: petname } = tools
    const protocol = use_protocol(petname)({ state })
    const opts = { data }
    const element = shadowfy()(tools(opts, protocol))
    mini_popup_wrapper.append(element)
  }
  { // mission statement
    const { name: petname } = mission_statement
    const protocol = use_protocol(petname)({ state })
    const opts = { data }
    const element = shadowfy()(mission_statement(opts, protocol))
    popup_wrapper.append(element)
    // @TODO: why popup_wrapper vs. mini_popup_wrapper ?
    // @TODO: separate data from programs!
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el


  async function open_important_documents () {
    icons_data.forEach(icon => {
      const channel = state.net[state.aka[icon.name]]
      channel.send({
        head: [id, channel.send.id, channel.mid++],
        type: 'hide'
      })
    })
    const channel = state.net[state.aka.important_documents]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'show'
    })
  }
}
function get_theme () {
  return `
    .main_wrapper {
      box-sizing: border-box;
      container-type: inline-size;
      display: flex;
      gap: 20px;
      justify-content: space-between;
      margin: 0;
      padding: 30px 10px;
      opacity: 1;
      background-size: 16px 16px;
position: relative;
      overflow-scroll;
    }
    .main_wrapper .icon_wrapper {
      display: flex;
      flex-wrap: wrap;
      flex-direction: row;
      gap: 25px;
      width: fit-content;
      height: fit-content;
      align-items: center;
      user-select: none;
      position:sticky;
      top:30px;
    }
    .main_wrapper .icon_wrapper:hover {
      cursor: pointer;
    }
    .main_wrapper .popup_wrapper {
      display: inline;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 20;
      overflow: scroll;
    }
    .main_wrapper .popup_wrapper::-webkit-scrollbar {
      display: none;
    }
    .main_wrapper .popup_wrapper .mini_popup_wrapper {
      display: flex;
      flex-direction: column;
      width: 100%;
    }
    @container (min-width: 510px) {
      .main_wrapper .icon_wrapper {
        flex-direction: column;
      }
      .main_wrapper .main_wrapper {
        flex-direction: row;
      }
      .main_wrapper .popup_wrapper {
        display: flex;
        flex-direction: column;
        position: relative;
        top: 0;
      }
    }
    @container (min-width: 768px) {
      .main_wrapper .popup_wrapper {
        padding-left: 100px;
      }
    }
    @container (min-width: 1200px) {
      .main_wrapper .popup_wrapper {
        flex-direction: row;
        gap: 20px;
        padding-left: 200px;
      }
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}