module.exports = scrollbar

const path = require('path')
const cwd = process.cwd()
const prefix = path.relative(cwd, __dirname)

const sm_icon_button = require('buttons/sm_icon_button')


const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)

let id = 0;

function scrollbar(opts, protocol){

    const name = "scrollbar-"+id++;
    const {data} = opts
    let message = {
        head: {by: name, to:'app_projects', mid:0},
        type: 'status',
        data: null
    }
    let content_scrollWidth, content_clientWidth, content_scrollLeft;
    
    const [notify, setScrollLeft] = protocol({from: name}, [handle_scroll, listen])
    function listen(message){
        const {head, type, data} = message
        const {by, to, id} = head
        const { sh, ch, st } = data
        content_clientWidth = ch;
        content_scrollWidth = sh;
        content_scrollLeft = st;
    }

    // Assigning all the icons
    const { img_src: { 
        icon_arrow_right = `${prefix}/icon_arrow_right.svg`,
        icon_arrow_left = `${prefix}/icon_arrow_left.svg`
    } } = data

    const el = document.createElement('div')
    el.classList.add('container')
    const shadow = el.attachShadow({ mode: 'closed'})
    shadow.innerHTML = `
        <div class="scrollbar_wrapper">
            <div class="bar_wrapper">
                <div class="bar"> </div>
            </div>
        </div>
        <style> ${get_theme} </style>
    `
    const bar = shadow.querySelector('.bar')
    let lastPageX;
    bar.onmousedown = handle_mousedown;
    function handle_mousedown(e){
        lastPageX = e.pageX;
        window.onmousemove = handle_mousemove;
        function handle_mousemove(e){
            notify(message)
            const delta = e.pageX - lastPageX;
            lastPageX = e.pageX;
            const ratio = content_clientWidth / content_scrollWidth
            setScrollLeft(content_scrollLeft + delta / ratio)
        }
        window.onmouseup = handle_mouseup;
        function handle_mouseup(){
            window.onmousemove = null;
            window.onmouseup = null;
        }
    }
    
      
      // Observe one or multiple elements
    function handle_scroll(){
        notify(message)
        const ratio = content_clientWidth / content_scrollWidth
        if(ratio >= 1) 
            el.style.cssText = 'display: none;'
        else
            el.style.cssText = 'display: inline;'
        bar.style.cssText = 'width:' + Math.max(ratio * 100, 10) + '%; left:' + (content_scrollLeft / content_scrollWidth ) * 100 + '%;'
    }


    const arrow_down_btn = sm_icon_button({src: icon_arrow_right, activate: false})
    arrow_down_btn.classList.add('arrow_down_btn')
    arrow_down_btn.onclick = () => {
        notify(message)
        const ratio = content_clientWidth / content_scrollWidth
        setScrollLeft(content_scrollLeft + 30 / ratio)
    }

    const arrow_up_btn = sm_icon_button({src: icon_arrow_left, activate: false})
    arrow_up_btn.classList.add('arrow_up_btn')
    arrow_up_btn.onclick = () => {
        notify(message)
        const ratio = content_clientWidth / content_scrollWidth
        setScrollLeft(content_scrollLeft - 30 / ratio)
    }

    const scrollbar_wrapper = shadow.querySelector('.scrollbar_wrapper')
    
    

    setTimeout(() => {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if(entry.isIntersecting) {
                    handle_scroll()
                    observer.unobserve(entry.target)
                }
            })
        });
        observer.observe(scrollbar_wrapper)}, 2000)
    // setTimeout(window.requestAnimationFrame(handle_scroll), 5000);

    scrollbar_wrapper.append(arrow_up_btn, arrow_down_btn)


    shadow.adoptedStyleSheets = [ sheet ]
    return el;
}

function get_theme() {
    return `
        .scrollbar_wrapper{
            height: 32px;
            width: 100%;
            display: flex;
            box-sizing: border-box;
            border:1px solid var(--primary_color);
        }
        .bar_wrapper{
            display: flex;
            width: 100%;
        }
        .bar {
            position: relative;
            background-color: var(--primary_color);
            height: 30px;
            cursor: pointer;
            transition: opacity 0.25s linear;
            box-shadow:inset 0px 0px 0px 1px var(--bg_color);
            
        }
        .bar:hover {
            cursor: pointer
        }
        .bar:active {
            -o-user-select: none;
            -ms-user-select: none;
            -moz-user-select: none;
            -webkit-user-select: none;
            user-select: none;
        }
    `
}