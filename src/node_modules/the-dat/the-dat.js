const window_bar = require('window-bar')

const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
/******************************************************************************
  THE DAT COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const default_opts = { }

module.exports = the_dat

function the_dat (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const name = `the_dat-${count++}`
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  // Assigning all the icons
  const { img_src } = data
  const {
    icon_the_dat,
    icon_vr,
    icon_full_screen
  } = img_src
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const PROTOCOL = {
    'toggle_fullscreen': toggle_fullscreen,
    'toggle_VR': toggle_VR,
    'toggle_active_state': toggle_active_state
  }
  protocol({ from: name }, listen)
  function listen () {
    the_dat_wrapper.style.display = 'inline'
  }
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow ({ mode: 'closed' })
  shadow.innerHTML = `<div class="the_dat">
    <div class="dat_content">
      <iframe style="background-color: black"></iframe>
    </div>
  </div>`
  shadow.adoptedStyleSheets = [sheet]
  const the_dat_wrapper = shadow.querySelector('.the_dat')
  const dat_content = shadow.querySelector('.dat_content')
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  const window = window_bar({
    name:'the_dat', 
    src: icon_the_dat,
    icon_buttons: [{icon: icon_vr, action: 'toggle_VR'}, {icon:icon_full_screen, action: 'toggle_fullscreen'}],
    data: data
  }, the_dat_protocol)
  the_dat_wrapper.prepend(window)
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el

  // cover protocol
  function the_dat_protocol (message, send) {
    return listen
    // Listening to toggle event 
    function listen (message) {
      const { head, refs, type, data, meta } = message  
      const action = PROTOCOL[type] || invalid      
      action(message)
    }
    function invalid (message) { console.error('invalid type', message) }
  }
  async function toggle_active_state (message) {
    const { head, refs, type, data, meta } = message
    const { active_state } = data
    ;( active_state === 'active')?the_dat_wrapper.style.display = 'none':''
    if (document.fullscreenElement) document.exitFullscreen()
  }
  async function toggle_fullscreen (message) {
    the_dat_wrapper.classList.toggle('active')
    dat_content.classList.toggle('active')
    if (document.fullscreenElement) document.exitFullscreen()
    else the_dat_wrapper.requestFullscreen()    
  }
  async function toggle_VR (message) {
    console.log('VR')
  }
}
function get_theme () {
  return `
    * {
      box-sizing: border-box;
      color: var(--primary_color);
    }
    .the_dat {
      &.active {
        position: fixed;
        width: 100vw;
        height: 100vh;
        top: 0;
        left: 0;
        z-index: 20;
      }
      .dat_content {
        position: relative;
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 100%;
        background-size: 10px 10px;
        background-color: var(--bg_color);
        border: 1px solid var(--primary_color);
        margin-bottom: 30px;
        &.active {
          height: 100vh;
        }
      }
    }
  `
}