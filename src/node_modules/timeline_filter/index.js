const search_input = require('search_input')
const select_button = require('../buttons/select_button')
const sm_icon_button = require('buttons/sm_icon_button')
const year_button = require('buttons/year_button')

module.exports = timeline_filter

// CSS Boiler Plat
const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)

var id = 0

function timeline_filter (opts, protocol) {
  const name = 'timeline_filter-' + id++
  const notify = protocol({ from: name }, listen)
  const PROTOCOL = {}
  const { data } = opts
  const { img_src : { icon_arrow_up = `${prefix}/icon_arrow_up.svg` }} = data
  const el = document.createElement('div')
  const shadow = el.attachShadow( { mode:`closed` } )
  shadow.innerHTML = `
    <div class="filter_wrapper">
      <div class="timeline_filter">
        <div class="date_wrapper"></div>
      </div>
    </div>
    <style> ${get_theme()} </style>
  `
  const search_project = search_input(opts, timeline_filter_protocol)
  const status_button = select_button({data: opts.data, name: 'STATUS', choices: ['ACTIVE', 'UNACTIVE', 'PAUSED']}, timeline_filter_protocol)
  const tag_button = select_button({data: opts.data, name: 'TAGS', choices: opts.tags}, timeline_filter_protocol)
  const month_button = sm_icon_button({src: icon_arrow_up, activate: true})
  const year_btn = year_button({data, latest_date: opts.latest_date}, timeline_filter_protocol)
  month_button.onclick = e => notify({
      head: {by:name, to:'app_timeline', mid:0},
      type: 'toggle_month_filter',
      data: null
  })
  year_btn.onclick = e => notify({
    head: { by: name, to: 'app_timeline', mid: 0 },
    type: 'toggle_year_filter',
    data: null
  })
  const timeline_filter = shadow.querySelector('.timeline_filter')
  timeline_filter.prepend(status_button, tag_button, search_project)
  const date_wrapper = shadow.querySelector('.date_wrapper')
  date_wrapper.append(month_button, year_btn)
  // shadow.append(timeline_filter)
  shadow.adoptedStyleSheets = [sheet]

  return el

  function timeline_filter_protocol (handshake, send, mid = 0) {
    if (handshake && handshake.from.includes('year_button')) PROTOCOL['get_date'] = send
    return listen
    function listen (message) {
      const { head,  refs, type, data, meta } = message
      const { by, to, id } = head
      // if( to !== id) return console.error('address unknown', message)
      message = {
        head: { by: name, to: 'app_timeline', mid: 0 },
        type: type,
        data: data
      }
      notify(message)
    }
  }
  function listen (message) {
    message.head.to = 'year_button'
    PROTOCOL['get_date'](message)
  }
}
function get_theme () {
  return`
    .filter_wrapper {
      container-type: inline-size;
      .timeline_filter {
        display: grid;
        grid-template-columns: 12fr;
        align-items: flex-end;   
        .date_wrapper {
          display: grid;
          grid-template-columns: 1fr 12fr;
        }
      }
    }
    @container (min-width: 450px) {
      .filter_wrapper {
        .timeline_filter {
          grid-template-columns: 1fr 1fr 9fr 1fr;
        }
      }
    }
  `
}