module.exports = mission_statement

const window_bar = require('window_bar')

// CSS Boiler Plat
const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)


let id = 0


function mission_statement (opts, protocol) {
    const name = `mission_statement`

    protocol({from: name}, listen)
    function listen(){
        mission_statement_wrapper.style.display = 'inline'
    }

    const {data} = opts
    // Assigning all the icons
    const {img_src} = data
    const {
        icon_pdf_reader
    } = img_src

    const el = document.createElement('div')
    const shadow = el.attachShadow ( { mode : 'closed' } )

    shadow.innerHTML = `
        <div class="mission_statement">
            <div class="mission_content">
                <h2>OUR MISSION</h2>
                <p>We aim to connect and support the dat community, promoting user rights and decentralized democracy, dat ecosystem provides resources to advance your hyprecore project.</p>
                <h2>OUR MISSION</h2>
                <p>We aim to connect and support the dat community, promoting user rights and decentralized democracy, dat ecosystem provides resources to advance your hyprecore project.</p>    
            </div>
        </div>
        <style> ${get_theme()} </style>
    `


    const window = window_bar({
        name:'Mission_statement.md', 
        src: icon_pdf_reader,
        data: data
    }, mission_statement_protocol)
    const mission_statement_wrapper = shadow.querySelector('.mission_statement')
    mission_statement_wrapper.prepend(window)


    shadow.adoptedStyleSheets = [ sheet ]
    return el

    
    // cover protocol
    function mission_statement_protocol(message, send){
        return listen
        // Listening to toggle event 
        function listen (message) {
            const {head, refs, type, data, meta} = message  
            const PROTOCOL = {
                'toggle_active_state': toggle_active_state
            }
            const action = PROTOCOL[type] || invalid      
            action(message)
        }
        function invalid (message) { console.error('invalid type', message) }
        async function toggle_active_state (message) {
            const {head, refs, type, data, meta} = message
            const {active_state} = data
            ;( active_state === 'active')?mission_statement_wrapper.style.display = 'none':''
        }
    }
    

}

function get_theme(){
    return`
        *{
            box-sizing: border-box;
            color: var(--primary_color);
        }
        .mission_statement{
            display: none;
        }
        .mission_content{
            position:relative;
            display:flex;
            flex-direction: column;
            width: 100vw;
            height: 100vh;
            padding: 10px;
            background-size: 10px 10px;
            background-color:var(--bg_color);
            border: 1px solid var(--primary_color);
            margin-bottom: 30px;
        }
        h2{
            margin: 0;
        }
        @media (min-width: 510px){
            .mission_content{
                width: auto;
                height: auto;
            }
        }
    `
}