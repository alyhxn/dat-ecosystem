const path = require('path')
const sm_icon_button_alt = require('buttons/sm_icon_button_alt')
const sm_text_button = require('buttons/sm_text_button')

const cwd = process.cwd()
const prefix = path.relative(cwd, __dirname)

// CSS Boiler Plat
const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)

var id = 0

module.exports = window_bar

function window_bar (opts, protocol) {
  const name = `window_bar-${id++}`
  const { data } = opts
  const send = protocol({ from: name }, listen)
  // Assigning all the icons
  const { img_src } = data
  const {
    icon_close_light, 
    icon_arrow_down_light, 
    icon_arrow_up_light
  } = img_src
  const el = document.createElement('div')
  el.style.lineHeight = '0px'
  const shadow = el.attachShadow({ mode : 'closed' })
  shadow.innerHTML = `
    <div class="window_bar">
      <div class="application_icon_wrapper"></div>
      <div class="application_name"><span>${opts.name}</span></div>
      <div class="window_bar_actions">
        <div class="actions_wrapper"></div>
      </div>
    </div>
    <style>${get_theme()}</style>
  `
  // adding application icon
  const application_icon = sm_icon_button_alt({ src: opts.src })
  const application_icon_wrapper = shadow.querySelector('.application_icon_wrapper')
  application_icon_wrapper.append(application_icon)
  // adding close window button
  const window_bar_actions = shadow.querySelector('.window_bar_actions')
  const close_window_btn = sm_icon_button_alt({ src: icon_close_light })
  // close_window_btn.addEventListener('click', function() {
  //   send( { active_state : 'active' } )
  // })
  close_window_btn.onclick = event => send({
    head: {
      by: name,
      to: 'app_cover_0',
      mid: 0,
    },
    type: 'toggle_active_state', 
    data: { active_state : 'active' } 
  })
  const actions_wrapper = shadow.querySelector('.actions_wrapper')
  if (opts.action_buttons) {
    // adding additional actions wrapper
    opts.action_buttons.forEach((btn_name) => {
      const button = sm_text_button({ text: btn_name })
      actions_wrapper.append(button)
    })
    // adding toggle button for action wrapper
    const actions_toggle_btn = sm_icon_button_alt({
      src: icon_arrow_down_light,
      src_active: icon_arrow_up_light
    }, window_bar_protoocol)
    actions_toggle_btn.classList.add('actions_toggle_btn')
    actions_toggle_btn.addEventListener('click', function () {
      // shadow.querySelector('.window_bar_actions').classList.toggle('active');
    })
    window_bar_actions.append(actions_toggle_btn)
  }
  // Adding icon buttons
  if( opts.icon_buttons) opts.icon_buttons.forEach((btn) => {
    const button = sm_icon_button_alt({ src: btn.icon }, window_bar_protoocol)
    button.onclick = () => send({
      head: {
          by: name,
          to: 'app_cover_0',
          mid: 0,
      },
      type: btn.action, 
      data: {} 
    })
    window_bar_actions.append(button)
  })
  window_bar_actions.append(close_window_btn)
  // window_bar_protoocol
  function window_bar_protoocol (message, send) {
    return listen
  }
  function listen (message) {
    const { head, refs, type, data, meta } = message  
    const PROTOCOL = {
      'toggle_window_active_state': toggle_active_state
    }
    const action = PROTOCOL[type] || invalid      
    action(message)
  }
  function invalid (message) { console.error('invalid type', message) }
  async function toggle_active_state (message) {
    const { head, refs, type, data, meta } = message
    const  {active_state } = data
    // let actions_wrapper
    ;( active_state)?actions_wrapper.style.display = 'none':actions_wrapper.style.display = 'flex'
  }
  shadow.adoptedStyleSheets = [sheet]

  return el

}
function get_theme () {
  return `
    .window_bar {
      position: relative;
      z-index: 2;
      height: 30px;
      background-color: var(--primary_color);
      display: inline-flex;
      width: 100%;
      justify-content: flex-start;
      background-size: 5px 5px;
      background-image: repeating-linear-gradient(0deg, var(--bg_color), var(--bg_color) 2px, var(--primary_color) 2px, var(--primary_color));
      container-type: inline-size;
      border: 1px solid var(--primary_color);
      box-sizing: border-box;
      .application_name {
        display: flex;
        align-items:c enter;
        min-height: 100%;
        width: max-content;
        color: var(--bg_color);
        padding: 0 10px;
        font-size: 14px;
        letter-spacing: -1px;
        box-sizing: border-box;
        border: 1px solid var(--primary_color);
        background-color: var(--primary_color);
      }
      .window_bar_actions {
        margin-left: auto;
        display: flex;
        &.active {
          .actions_wrapper {
            display: flex;
          }
        }
        .actions_wrapper {
          display: none;
          position: absolute;
          flex-direction: column;
          z-index: 10;
          width: 100%;
          height: max-content;
          top: 30px;
          right: 0;
          background-color: var(--bg_color);
          border: 1px solid var(--primary_color);
        }
      }
    }
    @container (min-width: 856px) {
      .window_bar{ 
        .window_bar_actions {
          .actions_toggle_btn {
            display: none;
          }
          .actions_wrapper {
            display: flex !important;
            position: relative;
            flex-direction: row;
            top: unset;
            right: unset;
            height: 100%;
            width: max-content;
            border: 0px;
          }
        }
      }
    }
  `
}