const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
/******************************************************************************
  SEARCH INPUT COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const default_opts = { }

module.exports = input_search

function input_search (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = count++
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  let message = {
    head: ['input_search', 'project_filter', 'project_filter'],
    type: 'setFilter',
  }
  // Assigning all the icons
  const { img_src: {
      icon_search = `${prefix}/icon_search.svg`,
  } } = data
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const notify = protocol(null, listen)
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  // el.classList.add('input_wrapper')
  const shadow = el.attachShadow({ mode: `closed` })
  shadow.innerHTML = `<div class="search_input">
    <input class="input" type="text" placeholder="SEARCH...">
      ${icon_search}
    </input>
  </div>`
  shadow.adoptedStyleSheets = [sheet]
  const input = shadow.querySelector('.input')
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  input.oninput = (e) => {
    message['data'] = { filter: 'SEARCH', value:e.target.value }
    notify(message)
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el

  function listen (message) {
    // const {head,  refs, type, data, meta} = message
    // const [by, to, id] = head
    // if( to !== id) return console.error('address unknown', message)
  }
}
function get_theme () {
  return `
    .search_input {
      width: 100%;
      min-width: 100% !important;
      height: 30px;
      max-height: 40px;
      position: relative;
      flex-grow: 1;
      input {
        box-sizing: border-box;
        width: 100%;
        height: 100%;
        border: 3px solid var(--primary_color);
        padding: 10px 40px 10px 5px;
        outline: none;
        font-family: Silkscreen;
        font-size: 18px;
        letter-spacing: -1px;
        &:focus {
          border-color: var(--ac-1) !important;
        }
      }
      svg {
        position: absolute;
        right: 10px;
        top: 50%;
        translate: 0 -50%;
        width: 20px;
        height: auto;
      }
    }
  `
}