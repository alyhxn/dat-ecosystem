module.exports = cover_app


const path = require('path')
const cwd = process.cwd()
const prefix = path.relative(cwd, __dirname)

const window_bar = require('window_bar')
const sm_text_button = require('buttons/sm_text_button')

// CSS Boiler Plat
const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)


let id = 0


function cover_app (opts, protocol) {
    const name = `cover_app-${id++}`

    const {data} = opts
    // Assigning all the icons
    const {img_src} = data
    const {
        banner_cover = `${prefix}/banner_cover.svg`,
        tree_character = `${prefix}/tree_character.png`,
        icon_pdf_reader
    } = img_src

    const el = document.createElement('div')
    const shadow = el.attachShadow ( { mode : 'closed' } )

    shadow.innerHTML = `
        <div class="cover_wrapper">
        <div class="cover_content">
            <div class="cover_image">
                <img src="${banner_cover}" />
            </div>
            <div class="content_wrapper">
                <img src="${tree_character}" />
                WELCOME TO DAT ECOSYSTEM
            </div>
        </div>
        </div>
        <style> ${get_theme()} </style>
    `


    const cover_window = window_bar({
        name:'Learn_about_us.pdf', 
        src: icon_pdf_reader,
        action_buttons: ['View more (20)', 'TELL ME MORE'],
        data: data
    }, cover_protocol)
    const cover_wrapper = shadow.querySelector('.cover_wrapper')
    cover_wrapper.prepend(cover_window)


    shadow.adoptedStyleSheets = [ sheet ]
    return el

    
    // cover protocol
    function cover_protocol(message, send){
        return listen
    }
    // Listening to toggle event 
    function listen (message) {
        const {head, refs, type, data, meta} = message  
        const PROTOCOL = {
            'toggle_active_state': toggle_active_state
        }
        const action = PROTOCOL[type] || invalid      
        action(message)
    }
    function invalid (message) { console.error('invalid type', message) }
    async function toggle_active_state (message) {
        const {head, refs, type, data, meta} = message
        const {active_state} = data
        ;( active_state === 'active')?cover_wrapper.style.display = 'none':''
    }

}




function get_theme(){
    return`
        *{
            box-sizing: border-box;
        }

        .app_cover{
            display:none;
        }

        .cover_content{
            position:relative;
            height:max-content;
            width:100%;
            display:flex;
            justify-content: center;
            align-items: center;
            padding: 150px 0px;
            background-image: radial-gradient(var(--primary_color) 1px, var(--bg_color) 1px);
            background-size: 10px 10px;
            background-color:var(--bg_color);
            border: 1px solid var(--primary_color);
            margin-bottom: 30px;
        }

        /* This covers background-image will change to an image */
        .cover_image{
            position: absolute;
            width:100%;
            height:100%;
            overflow:hidden;
        }
        .cover_image img{
            position:absolute;
            left:50%;
            top:50%;
            width: auto;
            height: 100%;
            transform:translate(-50%, -50%);
        }


        /* Cover image alignment */
        .content_wrapper{
            display: flex;
            flex-direction: column;
            align-items:center;
            gap:20px;
            position: relative;
            z-index:1;
            color:var(--primary_color);
            text-align:center;
        }
        .content_wrapper img{
            width: 300px;
            height: auto;
        }

    `
}