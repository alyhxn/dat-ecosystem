const project_card = require('project-card')
const window_bar = require('window-bar')
const project_filter = require('project-filter')
const scrollbar = require('scrollbar')
/******************************************************************************
  APP PROJECTS COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = app_projects
// ----------------------------------------
function app_projects (opts = default_opts, protocol) {
  // ----------------------------------------
  // RESOURCE POOL (can't be serialized)
  // ----------------------------------------
  const ro = new ResizeObserver(entries => {
    console.log('ResizeObserver:terminal:resize')
    const scroll_channel = state.net[state.aka.scrollbar]
    scroll_channel.send({
      head: [id, scroll_channel.send.id, scroll_channel.mid++],
      refs: { },
      type: 'handle_scroll',
    })
  })
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  // Assigning all the icons
  const { img_src: {
    icon_discord = `${prefix}/icon_discord.png`,
    icon_twitter = `${prefix}/icon_twitter.png`,
    icon_github = `${prefix}/icon_github.png`,
    icon_folder_solid = `${prefix}/icon_folder_solid.svg`,
    project_logo_1 = `${prefix}/project_logo_1.png`,
  } } = data

  const cards_data = [
    { 
      project_name: 'Agregore', 
      project_desc: 'Agregore, a browser for the distributed web, facilitates peer-to-peer data sharing without central servers, supporting protocols like BitTorrent and IPFS for direct loading and sharing of content.', 
      project_logo: project_logo_1,
      project_website: "https://agregore.mauve.moe/",
      project_socials: [
        {github: 'https://github.com/RangerMauve/agregore-browser'}, 
        {discord: 'https://discord.com/invite/QMthd4Y'},
      ],
      project_tags: ['Hypercore', 'Hypercore', 'Hypercore', 'Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'ahau',
      project_desc: 'Āhau is a Whānau Data Platform that helps whānau-based communities (whānau, hapū, Iwi) capture, preserve, and share important information and histories into secure, whānau managed databases and servers.', 
      project_logo: project_logo_1,
      project_website: 'https://www.ahau.io/',
      project_socials: [
        {github: 'https://www.hypercore.com/ahau'}, 
        {discord: 'https://chat.ahau.io/'},
      ],
      project_tags: ['Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'ara', 
      project_desc: "Ara represents a new era for content on the internet. Where we get our voices back. Where what's ours is ours. All content, decentralized, secure, owned, distributed, paid for, and rewarded between peers.", 
      project_logo: project_logo_1,
      project_website: 'https://ara.one/',
      project_socials: [
        {github: 'https://github.com/AraBlocks'}, 
        {discord: 'https://discord.gg/eUMzA4Y'},
      ],
      project_tags: ['Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'cabal', 
      project_desc: 'Cabal is an experimental P2P community chat platform where servers are unnecessary, everything runs locally, and each community is identified by a secret key, offering both internet and local network connectivity.', 
      project_logo: project_logo_1,
      project_website: 'https://cabal.chat/',
      project_socials: [
        {github: 'https://github.com/cabal-club'},
      ],
      project_tags: ['Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'datdot', 
      project_desc: 'DatDot enables peer-to-peer sharing of storage space and data seeding to make data sovereignity and portability more accessible and reliable for users.', 
      project_logo: project_logo_1,
      project_website: 'https://datdot.org/',
      project_socials: [
        {github: 'https://github.com/datdotorg'},
        {twitter: 'https://twitter.com/datdotorg'}, 
        {discord: 'https://discord.com/invite/3CJuGxkyyE'},
      ],
      project_tags: ['Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'dxos', 
      project_desc: 'DXOS provides developers with everything they need to build real-time, collaborative apps which run entirely on the client, and communicate peer-to-peer, without servers.', 
      project_logo: project_logo_1,
      project_website: 'https://dxos.org/',
      project_socials: [
        {github: 'https://github.com/dxos/dxos'}, 
        {discord: 'https://discord.gg/eXVfryv3sW'},
      ],
      project_tags: ['Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'earthstar', 
      project_desc: 'Earthstar is a small and resilient distributed storage protocol designed with a strong focus on simplicity and versatility, with the social realities of peer-to-peer computing kept in mind.', 
      project_logo: project_logo_1,
      project_website: 'https://github.com/earthstar-project/earthstar',
      project_socials: [
        {github: 'https://github.com/earthstar-project/earthstar'}, 
        {discord: 'https://discord.gg/5b8q7VtunU'},
      ],
      project_tags: ['Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'gatewaybrowser', 
      project_desc: 'An experimental mobile browser that aims to help build a sustainable community-owned P2P web.', 
      project_logo: project_logo_1,
      project_website: 'https://twitter.com/GatewayBrowser',
      project_socials: [
        {github: 'https://hypercore.com/gateway-browser/gateway'},
        {twitter: 'https://twitter.com/GatewayBrowser'},
      ],
      project_tags: ['Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'hop', 
      project_desc: 'We are building a choherence protocol based on peer to peer open source software and toolkit that empower everyone to have sovereignity over data that shapes the health of the world. ', 
      project_logo: project_logo_1,
      project_website: 'https://www.healthscience.network/',
      project_socials: [
        {github: 'https://github.com/healthscience'}, 
        {discord: 'https://discord.gg/UZWgrjZZXK'},
      ],
      project_tags: ['Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'hyper-nostr', 
      project_desc: 'The goal of this tool is to behave as a public relay; think of the chosen topic as a public relay, where you can send and receive notes from your peers!', 
      project_logo: project_logo_1,
      project_website: 'https://github.com/Ruulul/hyper-nostr',
      project_socials: [
        {github: 'https://github.com/Ruulul/hyper-nostr'}, 
        {discord: 'https://discord.gg/8jvhQYKnwQ'},
      ],
      project_tags: ['Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'hypercore-protocol', 
      project_desc: 'Holepunch equips developers with a powerful suite of independent components to effortlessly construct peer-to-peer applications.', 
      project_logo: project_logo_1,
      project_website: 'https://hypercore-protocol.org/',
      project_socials: [
        {github: 'https://github.com/hypercore-protocol'}, 
        {discord: 'https://discord.gg/qkV4YMwHgZ'},
      ],
      project_tags: ['Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'keet-holepunch', 
      project_desc: 'Keet only shares end-to-end encrypted data between the participants in every call. Without middlemen, third-parties, or servers, there’s nobody left who can snoop on calls, leak or collect data.', 
      project_logo: project_logo_1,
      project_website: 'https://keet.io/',
      project_socials: [
        {twitter: 'https://twitter.com/keet_io'}, 
        {discord: 'https://discord.gg/znw6KfTyw8'},
      ],
      project_tags: ['Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'peermaps', 
      project_desc: 'Peermaps is a distributed, offline-friendly alternative to commercial map providers such as google maps. Instead of fetching data from a centralized tile service, your computer fetches map data from other peers across the network.', 
      project_logo: project_logo_1,
      project_website: 'https://peermaps.org/',
      project_socials: [
        {github: 'https://github.com/peermaps'},
      ],
      project_tags: ['Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'peershare',
      project_desc: 'PeerShare enables you to share files to your friends, family, colleagues etc, using peer-to-peer technology. With a clean, easy to read interface, you can share your files right away.',
      project_logo: project_logo_1,
      project_website: 'https://peershare.lone-wolf.software/',
      project_socials: [
        {github: 'https://github.com/connor-davis/peershare'},
        {twitter: 'https://twitter.com/PeerShareApp'}, 
        {discord: 'https://discord.gg/U8sYVMts4W'},
      ],
      project_tags: ['Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'picostack', 
      project_desc: "We are an independent consultancy agency. And we're kinda nerdy about building a new internet.", 
      project_logo: project_logo_1,
      project_website: 'https://decentlabs.se/',
      project_socials: [
        {github: 'https://github.com/telamon/picostack'}, 
        {discord: 'https://discord.com/invite/8RMRUPZ9RS'},
      ],
      project_tags: ['Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'sher', 
      project_desc: "It's simple. You create your show and share the link with your audience.", 
      project_logo: project_logo_1,
      project_website: 'https://sher.geutstudio.com/',
      project_socials: [
        {twitter: 'https://twitter.com/the_sher_app'},
      ],
      project_tags: ['Hypercore_2'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'socketsupply', 
      project_desc: 'Build mobile and destkop apps for any OS using HTML, CSS, and JavaScript. Connect users with modern P2P that can make the cloud entirely optional.', 
      project_logo: project_logo_1,
      project_website: 'https://socketsupply.co/',
      project_socials: [
        {github: 'https://github.com/socketsupply'},
        {twitter: 'https://twitter.com/socketsupply'}, 
        {discord: 'https://discord.gg/YPV32gKCsH'},
      ],
      project_tags: ['Hypercore'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'sonar', 
      project_desc: 'Sonar is based on the Hypercore Protocol and part of the Dat ecosystem of peer-to-peer tools.', 
      project_logo: project_logo_1,
      project_website: 'https://sonar.dev.arso.xyz/',
      project_socials: [
        {github: 'https://github.com/arso-project'},
      ],
      project_tags: ['Hypercore_2'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'webscape-wanderer', 
      project_desc: '', 
      project_logo: project_logo_1,
      project_website: 'https://micahscopes.github.io/webscape-wanderer/',
      project_socials: [
        {github: 'https://github.com/micahscopes/webscape-wanderer/'}, 
        {twitter: 'https://twitter.com/micahscopes'},
      ],
      project_tags: ['Hypercore_2'],
      project_active_state: 'ACTIVE',
    },{ 
      project_name: 'wizardamigos',
      project_desc: 'Wizard Amigos is a global community of self-employed nomadic developers, technologists, creators, problem solvers, thinkers, activists, researchers, artists, and individuals from diverse backgrounds who share a common passion for technology and open collaboration.',
      project_logo: project_logo_1,
      project_website: 'https://wizardamigos.com/',
      project_socials: [
        {twitter: 'https://twitter.com/wizardamigos'},
        {discord: ''},
      ],
      project_tags: ['Hypercore_2'],
      project_active_state: 'ACTIVE',
    },]
  const tags = new Set(cards_data.flatMap(card => card.project_tags))
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = {}
  const channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `
  <div class="main_wrapper">
    <div class="windowbar"></div>
    <div class="content_area">
      <div class="project_wrapper"></div>
    </div>
    <div class="filter_wrapper">
      <div class="filterbar"></div>
    </div>
  </div>`
  const content_area = shadow.querySelector('.content_area')
  const project_wrapper = shadow.querySelector('.project_wrapper')
  const main_wrapper = shadow.querySelector('.main_wrapper')
  // ----------------------------------------
  const windowbar_shadow = shadow.querySelector('.windowbar').attachShadow(shopts)
  const filterbar_shadow = shadow.querySelector('.filterbar').attachShadow(shopts)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // windowbar
    const on = { 'toggle_active_state': toggle_active_state }
    const protocol = use_protocol('windowbar')({ state, on })
    const opts = {
      name: 'OUR_PROJECTS',
      src: icon_folder_solid,
      data,
    }
    const element = window_bar(opts, protocol)
    windowbar_shadow.append(element)
    async function toggle_active_state (message) {
      const { project_active_state } = message.data
      if (project_active_state === 'active') el.style.display = 'none'
    }
  }
  { // project cards
    const on = {}
    function make_card ({ on, state }) {
      return (card_data, i) => {
        const protocol = use_protocol(`card_${i}`)({ state, on })
        const opts = {project_data: card_data, data}
        const element = shadowfy()(project_card(opts, protocol))
        card_data.element = element
        return element
      }
    }
    project_wrapper.append(...cards_data.map(make_card({ on, state })))
    project_wrapper.onscroll = on_scroll
  }
  { // scrollbar
    const on = { 'set_scroll': on_set_scroll, status: onstatus }
    const protocol = use_protocol('scrollbar')({ state, on })
    opts.data.img_src.icon_arrow_start = opts.data.img_src.icon_arrow_up
    opts.data.img_src.icon_arrow_end = opts.data.img_src.icon_arrow_down
    const opts1 = { data }
    const element = shadowfy()(scrollbar(opts1, protocol))
    content_area.append(element)
  }
  { // project filter
    const on = { 'value': on_value }
    const protocol = use_protocol('project_filter')({ state, on })
    const opts = { data, tags: Array.from(tags) }
    const element = project_filter(opts, protocol)
    filterbar_shadow.append(element)
  }

  function on_value (message) {
    setFilter(message.data)
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------
  watch_scrollbar()

  return el

  function watch_scrollbar () {
    const channel = state.net[state.aka.scrollbar]
    ro.observe(main_wrapper)
  }
  function on_scroll (message) {
    const channel = state.net[state.aka.scrollbar]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      refs: { },
      type: 'handle_scroll',
    })
  }
  function on_set_scroll (message) {
    console.log('set_scroll', message) 
    setScrollTop(message.data)
  }
  function onstatus (message) {
    const channel = state.net[state.aka.scrollbar]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      refs: { cause: message.head },
      type: 'update_size',
      data: {
        sh: project_wrapper.scrollHeight,
        ch: project_wrapper.clientHeight,
        st: project_wrapper.scrollTop
      }
    })
  }
  async function setScrollTop (value) {
    project_wrapper.scrollTop = value
  }
  async function setFilter (data) {
    status[data.filter] = data.value
    let cardfilter = [...cards_data]
    if (status.SEARCH) {
      cardfilter = cardfilter.filter((card_data) => {
        return card_data.project_name.toLowerCase().match(status.SEARCH.toLowerCase())
      })
    }
    if (status.STATUS && status.STATUS !== 'ALL') {
      cardfilter = cardfilter.filter((card_data) => {
        return card_data.project_active_state === status.STATUS && card_data
      })
    }
    if (status.TAGS && status.TAGS !== 'ALL') {
      cardfilter = cardfilter.filter((card_data) => {
        return card_data.project_tags.includes(status.TAGS) && card_data
      })
    }
    project_wrapper.replaceChildren(...cardfilter.map(({ element }) => element))
    const channel = state.net[state.aka.scrollbar]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'handle_scroll'
    })
  }
}
function get_theme () {
  return `
    .content_area {
      display: flex;
    }
    .main_wrapper {
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      container-type: inline-size;
      width: 100%;
      height: 100%;
      margin-bottom: 30px;
      border: 1px solid var(--primary_color);
    }
    .main_wrapper * {
      box-sizing: border-box;
    }
    .main_wrapper .filter_wrapper {
      width: 100%;
      height: 100%;
    }
    .project_wrapper {
      --s: 15px; /* control the size */
      --_g: var(--bg_color_2) /* first color */ 0 25%, #0000 0 50%;
      background:
        repeating-conic-gradient(at 33% 33%,var(--_g)),
        repeating-conic-gradient(at 66% 66%,var(--_g)),
        var(--bg_color_3);  /* second color */  
      background-size: var(--s) var(--s);  
      border: 1px solid var(--primary_color);
      width: 100%;
      height: 400px;
      padding: 0px;
      display: grid;
      gap: 20px;
      grid-template-columns: 12fr;
      box-sizing: border-box;
      overflow: scroll;
      scrollbar-width: none; /* For Firefox */
    }
    .project_wrapper::-webkit-scrollbar {
      display: none;
    }
    @container (min-width: 768px) {
      .project_wrapper {
        grid-template-columns: repeat(2, 6fr);
      }
    }
    @container (min-width: 1200px) {
      .project_wrapper {
        grid-template-columns: repeat(3, 4fr);
      }
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}