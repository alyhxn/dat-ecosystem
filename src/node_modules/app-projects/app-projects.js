const project_card = require('project-card')
const window_bar = require('window-bar')
const project_filter = require('project-filter')
const scrollbar = require('scrollbar')
/******************************************************************************
  APP PROJECTS COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = app_projects
// ----------------------------------------
function app_projects (opts = default_opts, protocol) {
  // ----------------------------------------
  // RESOURCE POOL (can't be serialized)
  // ----------------------------------------
  const ro = new ResizeObserver(entries => {
    console.log('ResizeObserver:terminal:resize')
    const scroll_channel = state.net[state.aka.scrollbar]
    scroll_channel.send({
      head: [id, scroll_channel.send.id, scroll_channel.mid++],
      refs: { },
      type: 'handle_scroll',
    })
  })
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  // Assigning all the icons
  const { img_src: {
    icon_discord = `${prefix}/icon_discord.png`,
    icon_twitter = `${prefix}/icon_twitter.png`,
    icon_github = `${prefix}/icon_github.png`,
    icon_folder = `${prefix}/icon_folder.svg`,
    project_logo_1 = `${prefix}/project_logo_1.png`,
  } } = data

  const cards_data = [{ 
    title: 'Official starting of the web course.',
    project_logo: project_logo_1,
    project: 'Agregore', 
    link: '/',
    socials: [icon_github, icon_twitter, icon_discord],
    desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
    tags: ['Hypercore', 'Hyperplane', 'Hypertension'],
    active_state: 'ACTIVE',
    data,
  },{
    title: 'Official starting of the web course.',
    project_logo: project_logo_1,
    project: 'Ogre', 
    link: '/',
    socials: [icon_github, icon_twitter, icon_discord],
    desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
    tags: ['Dag', 'tag', 'Decentralized'],
    active_state: 'ACTIVE',
    data,
  },{
    title: 'Official starting of the web course.',
    project_logo: project_logo_1,
    project: 'Gerger', 
    link: '/',
    socials: [icon_github, icon_twitter, icon_discord],
    desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
    tags: ['Dag', 'Hyperplane', 'Hypercore'],
    active_state: 'UNACTIVE',
    data
  },{ 
    title: 'Official starting of the web course.',
    project_logo: project_logo_1,
    project: 'Agregored', 
    link: '/',
    socials: [icon_github, icon_twitter, icon_discord],
    desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
    tags: ['Daff', 'Dep1', 'Hypertension'],
    active_state: 'PAUSED',
    data
  },{
    title: 'Official starting of the web course.',
    project_logo: project_logo_1,
    project: 'Ogred', 
    link: '/',
    socials: [icon_github, icon_twitter, icon_discord],
    desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
    tags: ['Decentralized', 'tag', 'Hypercore'],
    active_state: 'UNACTIVE',
    data
  },{
    title: 'Official starting of the web course.',
    project_logo: project_logo_1,
    project: 'Ragregore', 
    link: '/',
    socials: [icon_github, icon_twitter, icon_discord],
    desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
    tags: ['Hypertension', 'Hypercore', 'Decentralized'],
    active_state: 'PAUSED',
    data
  },{
    title: 'Official starting of the web course.',
    project_logo: project_logo_1,
    project: 'Agregorey',
    link: '/',
    socials: [icon_github, icon_twitter, icon_discord],
    desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
    tags: ['Daff', 'Hyperplane', 'Dep1'],
    active_state: 'ACTIVE',
    data
  }]
  const tags = new Set(cards_data.flatMap(card => card.tags))
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = {}
  const channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `
  <div class="main_wrapper">
    <div class="windowbar"></div>
    <div class="content_area">
      <div class="project_wrapper"></div>
    </div>
    <div class="filter_wrapper">
      <div class="filterbar"></div>
    </div>
  </div>`
  const content_area = shadow.querySelector('.content_area')
  const project_wrapper = shadow.querySelector('.project_wrapper')
  const main_wrapper = shadow.querySelector('.main_wrapper')
  // ----------------------------------------
  const windowbar_shadow = shadow.querySelector('.windowbar').attachShadow(shopts)
  const filterbar_shadow = shadow.querySelector('.filterbar').attachShadow(shopts)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // windowbar
    const on = { 'toggle_active_state': toggle_active_state }
    const protocol = use_protocol('windowbar')({ state, on })
    const opts = {
      name: 'OUR_PROJECTS',
      src: icon_folder,
      data,
    }
    const element = window_bar(opts, protocol)
    windowbar_shadow.append(element)
    async function toggle_active_state (message) {
      const { active_state } = message.data
      if (active_state === 'active') el.style.display = 'none'
    }
  }
  { // project cards
    const on = {}
    function make_card ({ on, state }) {
      return (card_data, i) => {
        const protocol = use_protocol(`card_${i}`)({ state, on })
        const opts = card_data
        const element = shadowfy()(project_card(opts, protocol))
        card_data.element = element
        return element
      }
    }
    project_wrapper.append(...cards_data.map(make_card({ on, state })))
    project_wrapper.onscroll = on_scroll
  }
  { // scrollbar
    const on = { 'set_scroll': on_set_scroll, status: onstatus }
    const protocol = use_protocol('scrollbar')({ state, on })
    opts.data.img_src.icon_arrow_start = opts.data.img_src.icon_arrow_up
    opts.data.img_src.icon_arrow_end = opts.data.img_src.icon_arrow_down
    const opts1 = { data }
    const element = shadowfy()(scrollbar(opts1, protocol))
    content_area.append(element)
  }
  { // project filter
    const on = { 'value': on_value }
    const protocol = use_protocol('project_filter')({ state, on })
    const opts = { data, tags: Array.from(tags) }
    const element = project_filter(opts, protocol)
    filterbar_shadow.append(element)
  }

  function on_value (message) {
    setFilter(message.data)
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------
  watch_scrollbar()

  return el

  function watch_scrollbar () {
    const channel = state.net[state.aka.scrollbar]
    ro.observe(main_wrapper)
  }
  function on_scroll (message) {
    const channel = state.net[state.aka.scrollbar]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      refs: { },
      type: 'handle_scroll',
    })
  }
  function on_set_scroll (message) {
    console.log('set_scroll', message) 
    setScrollTop(message.data)
  }
  function onstatus (message) {
    const channel = state.net[state.aka.scrollbar]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      refs: { cause: message.head },
      type: 'update_size',
      data: {
        sh: project_wrapper.scrollHeight,
        ch: project_wrapper.clientHeight,
        st: project_wrapper.scrollTop
      }
    })
  }
  async function setScrollTop (value) {
    project_wrapper.scrollTop = value
  }
  async function setFilter (data) {
    status[data.filter] = data.value
    let cardfilter = [...cards_data]
    if (status.SEARCH) {
      cardfilter = cardfilter.filter((card_data) => {
        return card_data.project.toLowerCase().match(status.SEARCH.toLowerCase())
      })
    }
    if (status.STATUS && status.STATUS !== 'NULL') {
      cardfilter = cardfilter.filter((card_data) => {
        return card_data.active_state === status.STATUS && card_data
      })
    }
    if (status.TAGS && status.TAGS !== 'NULL') {
      cardfilter = cardfilter.filter((card_data) => {
        return card_data.tags.includes(status.TAGS) && card_data
      })
    }
    project_wrapper.replaceChildren(...cardfilter.map(({ element }) => element))
    const channel = state.net[state.aka.scrollbar]
    channel.send({
      head: [id, channel.send.id, channel.mid++],
      type: 'handle_scroll'
    })
  }
}
function get_theme () {
  return `
    .content_area {
      display: flex;
    }
    .main_wrapper {
      box-sizing: border-box;
      display: flex;
      flex-direction: column;
      container-type: inline-size;
      width: 100%;
      height: 100%;
      margin-bottom: 30px;
      border: 1px solid var(--primary_color);
      * {
        box-sizing: border-box;
      }
      .filter_wrapper {
        width: 100%;
        height: 100%;
      }
    }
    .project_wrapper {
      --s: 20px; /* control the size */
      --_g: var(--bg_color) /* first color */ 0 25%, #0000 0 50%;
      background:
        repeating-conic-gradient(at 66% 66%,var(--_g)),
        repeating-conic-gradient(at 33% 33%,var(--_g)),
        var(--primary_color);  /* second color */ 
      background-size: var(--s) var(--s);  
      border: 1px solid var(--primary_color);
      width: 100%;
      height: 400px;
      padding: 0px;
      display: grid;
      gap: 20px;
      grid-template-columns: 12fr;
      box-sizing: border-box;
      overflow: scroll;
      scrollbar-width: none; /* For Firefox */
      &::-webkit-scrollbar {
        display: none;
      }
    }
    @container (min-width: 768px) {
      .project_wrapper {
        grid-template-columns: repeat(2, 6fr);
      }
    }
    @container (min-width: 1200px) {
      .project_wrapper {
        grid-template-columns: repeat(3, 4fr);
      }
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}