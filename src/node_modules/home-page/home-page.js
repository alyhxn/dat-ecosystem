const cover_app = require('app-cover')
const app_timeline_mini = require('app-timeline-mini')
const app_projects_mini = require('app-projects-mini')
const app_about_us = require('app-about-us')
const app_footer = require('app-footer')
/******************************************************************************
  HOME PAGE COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
const default_opts = { }
const shopts = { mode: 'closed' }
// ----------------------------------------
module.exports = home_page
// ----------------------------------------
function home_page (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const id = `${ID}:${count++}` // assigns their own name
  const status = {}
  const state = STATE.ids[id] = { id, status, wait: {}, net: {}, aka: {} } // all state of component instance
  const cache = resources({})
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const { data } = opts
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const on = {}
  const channel = use_protocol('up')({ protocol, state, on })
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shadow = el.attachShadow(shopts)
  // adding a `main-wrapper` 
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="main-wrapper">
    <div class="main"></div>
  </div>`
  // ----------------------------------------
  const main = shadow.querySelector('.main').attachShadow(shopts)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  { // cover app
    const on = {}
    const protocol = use_protocol('cover_app')({ state, on })
    const opts = { data }
    const element = shadowfy()(cover_app(opts, protocol))
    main.append(element)
  }
  { // app timeline mini
    const on = {}
    const protocol = use_protocol('app_timeline_mini')({ state, on })
    const opts = { data }
    const element = shadowfy()(app_timeline_mini(opts, protocol))
    main.append(element)
  }
  { // app projects mini
    const on = {}
    const protocol = use_protocol('app_projects_mini')({ state, on })
    const opts = { data }
    const element = shadowfy()(app_projects_mini(opts, protocol))
    main.append(element)
  }
  { // app about us
    const on = {}
    const protocol = use_protocol('app_about_us')({ state, on })
    const opts = { data }
    const element = shadowfy()(app_about_us(opts, protocol))
    main.append(element)
  }
  { // app footer
    const on = {}
    const protocol = use_protocol('app_footer')({ state, on })
    const opts = { data }
    const element = shadowfy()(app_footer(opts, protocol))
    main.append(element)
  }
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el
}
function get_theme () {
  return `
    * {
      box-sizing: border-box;
    }
    .main-wrapper {
      container-type: inline-size;
    }
    .main-wrapper .main {
      margin: 0;
      padding: 30px 10px;
      opacity: 1;
      background-size: 16px 16px;
    }
    @container (min-width: 856px) {
      .main {
        padding-inline: 20px !important;
      }
    }
  `
}
// ----------------------------------------------------------------------------
function shadowfy (props = {}, sheets = []) {
  return element => {
    const el = Object.assign(document.createElement('div'), { ...props })
    const sh = el.attachShadow(shopts)
    sh.adoptedStyleSheets = sheets
    sh.append(element)
    return el
  }
}
function use_protocol (petname) {
  return ({ protocol, state, on = { } }) => {
    if (petname in state.aka) throw new Error('petname already initialized')
    const { id } = state
    const invalid = on[''] || (message => console.error('invalid type', message))
    if (protocol) return handshake(protocol(Object.assign(listen, { id })))
    else return handshake
    // ----------------------------------------
    // @TODO: how to disconnect channel
    // ----------------------------------------
    function handshake (send) {
      state.aka[petname] = send.id
      const channel = state.net[send.id] = { petname, mid: 0, send, on }
      return protocol ? channel : Object.assign(listen, { id })
    }
    function listen (message) {
      const [from] = message.head
      const by = state.aka[petname]
      if (from !== by) return invalid(message) // @TODO: maybe forward
      console.log(`[${id}]:${petname}>`, message)
      const { on } = state.net[by]
      const action = on[message.type] || invalid
      action(message)
    }
  }
}
// ----------------------------------------------------------------------------
function resources (pool) {
  var num = 0
  return factory => {
    const prefix = num++
    const get = name => {
      const id = prefix + name
      if (pool[id]) return pool[id]
      const type = factory[name]
      return pool[id] = type()
    }
    return Object.assign(get, factory)
  }
}