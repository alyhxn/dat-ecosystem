const cover_app = require('app-cover')
const app_timeline_mini = require('app-timeline-mini')
const app_projects_mini = require('app-projects-mini')
const app_about_us = require('app-about-us')
const app_footer = require('app-footer')

// CSS Boiler Plat
const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())

// HOME PAGE
module.exports = home_page

function home_page (opts, protocol) {
    const { data } = opts
    const components = [
      cover_app({ data }),
      app_timeline_mini({ data }),
      app_projects_mini({ data }),
      app_about_us({ data }),
      app_footer({ data }),
    ]
  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  // adding a `main-wrapper` 
  shadow.innerHTML = `
    <div class="main-wrapper">
      <div class="main"></div>
    </div>
    <style>${get_theme()}</style>
  `
  const main = shadow.querySelector('.main')
  main.append(...components)
  // shadow.append(main)
  shadow.adoptedStyleSheets = [sheet]

  return el

  // Placeholder code for learning purposes
  // Will be removed
  function home_protocol (handshake, send){
    listen.id  = id
    if (send) return listen
    const PROTOCOL = {
      'toggle_display' : toggle_display
    }
    send = handshake(null, listen)
    function listen (message){
      function format (new_message = {
        head: [from = 'alice', to = 'bob', message_id = 1],
        refs: { cause: message.head }, // reply to received message
        type: 'change_theme',
        data: `.foo { background-color: red; }`
      }) { return new_message }
      console.log(format())
      // const { head, type, data } = message
      // const [by, to, id] = head
      // if (to !== id) return console.error('address unknown', message)
      // const action = PROTOCOL[type] || invalid
      // action(message)
    }
    function invalid (message) { console.error('invalid type', message) }
    async function toggle_display ({ head: [to], data: theme }) {
      // @TODO: apply theme to `sheet` and/or `style` and/or css `var(--property)`
    }
  }
}
function get_theme () {
  return`
    * {
      box-sizing: border-box;
    }
    .main-wrapper {
      container-type: inline-size;
      .main {
        margin: 0;
        padding: 30px 10px;
        opacity: 1;
        background-image: radial-gradient(var(--primary_color) 2px, var(--bg_color) 2px);
        background-size: 16px 16px;
      }
    }
    @container (min-width: 856px) {
      .main {
        padding-inline: 20px !important;
      }
    }
  `
}