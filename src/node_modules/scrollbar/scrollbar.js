const path = require('path')
const sm_icon_button = require('buttons/sm-icon-button')

const cwd = process.cwd()
const prefix = path.relative(cwd, __dirname)

const svgdot_datauri = `
<svg width="16px" height="16px" viewBox="8 8 8 8" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path fill="#2ACA4B" d="M12 9.5C13.3807 9.5 14.5 10.6193 14.5 12C14.5 13.3807 13.3807 14.5 12 14.5C10.6193 14.5 9.5 13.3807 9.5 12C9.5 10.6193 10.6193 9.5 12 9.5Z"></path>
</svg>
`

const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)
/******************************************************************************
  SCROLL COMPONENT
******************************************************************************/

let count = 0

module.exports = scrollbar

function scrollbar (opts, protocol) {
  const id = "scrollbar-" + count++
  const state = {
    content_scrollSize: null,   // Width, Height
    content_clientSize: null,  // Width, Height
    content_scrollStart: null, // Left, Top
  }
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const {
    horizontal = false,
    data: {
      img_src: {
        icon_arrow_start = svgdot_datauri,
        icon_arrow_end = svgdot_datauri,
      }
    }
  } = opts
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const notify = scrollbar_protocol(protocol)
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  el.classList.add('container')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `<div class="scrollbar_wrapper">
    <div class="bar_wrapper">
      <div class="bar"></div>
    </div>
  </div>`
  shadow.adoptedStyleSheets = [sheet]
  const scrollbar_wrapper = shadow.querySelector('.scrollbar_wrapper')
  const bar_wrapper = shadow.querySelector('.bar_wrapper')
  const bar = shadow.querySelector('.bar')

  if (horizontal) {
    scrollbar_wrapper.classList.add('horizontal-wrapper')
    bar_wrapper.classList.add('horizontal-bar-wrapper')
    bar.classList.add('horizontal-bar')
  } else {
    scrollbar_wrapper.classList.add('vertical-wrapper')
    bar_wrapper.classList.add('vertical-bar-wrapper')
    bar.classList.add('vertical-bar')
  }

  let lastPage

  bar.onmousedown = handle_mousedown
  const arrow_end_btn = sm_icon_button({
    src: icon_arrow_end, activate: false
  })
  arrow_end_btn.classList.add('arrow_end_btn')
  arrow_end_btn.onclick = () => {
    emit_status()
    const ratio = state.content_clientSize / state.content_scrollSize
    notify({
      head: { by: id, to: 'app_projects', mid: 0 },
      type: 'set_scroll_start',
      data: state.content_scrollStart + 30 / ratio
    })
  }
  const arrow_start_btn = sm_icon_button({
    src: icon_arrow_start, activate: false
  })
  arrow_start_btn.classList.add('arrow_start_btn')
  arrow_start_btn.onclick = () => {
    emit_status()
    const ratio = state.content_clientSize / state.content_scrollSize
    notify({
      head: { by: id, to: 'app_projects', mid: 0 },
      type: 'set_scroll_start',
      data: state.content_scrollStart - 30 / ratio
    })
  }
  setTimeout(() => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          handle_scroll()
          observer.unobserve(entry.target)
        }
      })
    })
    observer.observe(scrollbar_wrapper)
  }, 2000)
  scrollbar_wrapper.append(arrow_start_btn, arrow_end_btn)

  return el

  function scrollbar_protocol (protocol) {
    const on = { update_size, handle_scroll }
    return protocol(Object.assign(listen, { id }))
    function invalid (message) { console.error('invalid type', message) }
    function listen (message) {
      console.log(`[${id}]`, message)
      // const { on } = state.net[state.aka.navbar]
      const action = on[message.type] || invalid
      action(message)
    }
  }
  function update_size ({ data }) {
    const { sh, ch, st } = data
    state.content_clientSize = ch
    state.content_scrollSize = sh
    state.content_scrollStart = st
  }
  function handle_scroll () {
    emit_status()
    const ratio = state.content_clientSize / state.content_scrollSize
    if (ratio >= 1) el.style.cssText = 'display: none;'
    else el.style.cssText = 'display: inline;'
    const [prop1, prop2] = horizontal ? ['width', 'left'] : ['height', 'top']
    const percent1 = Math.max(ratio * 100, 10)
    const percent2 = (state.content_scrollStart / state.content_scrollSize ) * 100
    bar.style.cssText = `${prop1}: ${percent1}%; ${prop2}: ${percent2}%;`
  }
  function emit_status () {
    notify({
      head: { by: id, to: 'app_projects', mid: 0 },
      type: 'status',
      data: null
    })
  }
  function handle_mousedown (e) {
    lastPage = horizontal ? e.pageX : e.pageY
    // @TODO:
    // => maybe refactor to use ELEMENT instead of WINDOW
    // https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event
    window.onmousemove = handle_mousemove
    window.onmouseup = handle_mouseup
  }
  function handle_mouseup () {
    window.onmousemove = null
    window.onmouseup = null
  }
  function handle_mousemove (e) {
    emit_status()
    const nextPage = horizontal ? e.pageX : e.pageY
    const delta = nextPage - lastPage
    lastPage = nextPage
    const ratio = state.content_clientSize / state.content_scrollSize
    notify({
      head: { by: id, to: 'app_projects', mid: 0 },
      type: 'set_scroll_start',
      data: state.content_scrollStart + delta / ratio
    })
  }
}
function get_theme () {
  return `
    .horizontal-wrapper {
      height: 30px;
      width: 100%;
      flex-direction: row;
    }
    .vertical-wrapper {
      width: 30px;
      height: 100%;
      flex-direction: column;
    }
    .scrollbar_wrapper {
      box-sizing: border-box;
      display: flex;
      .vertical-bar-wrapper {
        flex-direction: column;
        height: 100%;
      }
      .horizontal-bar-wrapper {
        width: 100%;
      }
      .bar_wrapper {
        display: flex;
        .vertical-bar {
          height: 30px;
        }
        .horizontal-bar {
          width: 30px;
        }
        .bar {
          position: relative;
          background-color: var(--primary_color);
          cursor: pointer;
          transition: opacity 0.25s linear;
          box-shadow:inset 0px 0px 0px 1px var(--bg_color);
          &:hover {
            cursor: pointer
          }
          &:active {
            -o-user-select: none;
            -ms-user-select: none;
            -moz-user-select: none;
            -webkit-user-select: none;
            user-select: none;
          }
        }
      }
    }
  `
}