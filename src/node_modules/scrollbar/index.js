const path = require('path')
const sm_icon_button = require('buttons/sm_icon_button')

const cwd = process.cwd()
const prefix = path.relative(cwd, __dirname)

const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)

let id = 0

module.exports = scrollbar

function scrollbar (opts, protocol) {
  const name = "scrollbar-" + id++
  const { data } = opts
  let message = {
    head: { by: name, to: 'app_projects', mid: 0 },
    type: 'status',
    data: null
  }
  let content_scrollHeight, content_clientHeight, content_scrollTop
  const [notify, setScrollTop] = protocol({ from: name }, [handle_scroll, listen])
  function listen (message) {
    const { head,  refs, type, data, meta } = message
    const { by, to, id } = head
    const { sh, ch, st } = data
    content_clientHeight = ch
    content_scrollHeight = sh
    content_scrollTop = st
  }
  // Assigning all the icons
  const { img_src: { 
    icon_arrow_down = `${prefix}/icon_arrow_down.svg`,
    icon_arrow_up = `${prefix}/icon_arrow_up.svg`
  } } = data
  const el = document.createElement('div')
  el.classList.add('container')
  const shadow = el.attachShadow({ mode: 'closed'})
  shadow.innerHTML = `
    <div class="scrollbar_wrapper">
      <div class="bar_wrapper">
        <div class="bar"> </div>
      </div>
    </div>
    <style> ${get_theme()} </style>
  `
  const bar = shadow.querySelector('.bar')
  let lastPageY;
  bar.onmousedown = handle_mousedown
  const arrow_down_btn = sm_icon_button({src: icon_arrow_down, activate: false})
  arrow_down_btn.classList.add('arrow_down_btn')
  arrow_down_btn.onclick = () => {
    notify(message)
    const ratio = content_clientHeight / content_scrollHeight
    setScrollTop(content_scrollTop + 30 / ratio)
  }
  const arrow_up_btn = sm_icon_button({src: icon_arrow_up, activate: false})
  arrow_up_btn.classList.add('arrow_up_btn')
  arrow_up_btn.onclick = () => {
    notify(message)
    const ratio = content_clientHeight / content_scrollHeight
    setScrollTop(content_scrollTop - 30 / ratio)
  }
  const scrollbar_wrapper = shadow.querySelector('.scrollbar_wrapper')
  setTimeout(() => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          handle_scroll()
          observer.unobserve(entry.target)
        }
      })
    })
  observer.observe(scrollbar_wrapper)
  }, 2000)
  // setTimeout(window.requestAnimationFrame(handle_scroll), 5000);
  scrollbar_wrapper.append(arrow_up_btn, arrow_down_btn)
  shadow.adoptedStyleSheets = [sheet]

  return el
  
  function handle_mousedown (e) {
    lastPageY = e.pageY
    window.onmousemove = handle_mousemove
    function handle_mousemove (e) {
      notify(message)
      const delta = e.pageY - lastPageY
      lastPageY = e.pageY
      const ratio = content_clientHeight / content_scrollHeight
      setScrollTop(content_scrollTop + delta / ratio)
    }
    window.onmouseup = handle_mouseup
    function handle_mouseup () {
      window.onmousemove = null
      window.onmouseup = null
    }
  }
  function handle_scroll () {
    notify(message)
    const ratio = content_clientHeight / content_scrollHeight
    if (ratio >= 1) el.style.cssText = 'display: none;'
    else el.style.cssText = 'display: inline;'
    bar.style.cssText = 'height:' + Math.max(ratio * 100, 10) + '%; top:' + (content_scrollTop / content_scrollHeight ) * 100 + '%;'
  }
}
function get_theme () {
  return `
    .scrollbar_wrapper {
      width: 30px;
      height: 100%;
      display: flex;
      flex-direction: column;
      box-sizing: border-box;
      .bar_wrapper {
        display: flex;
        flex-direction: column;
        height: 100%;
        .bar {
          position: relative;
          background-color: var(--primary_color);
          width: 30px;
          cursor: pointer;
          transition: opacity 0.25s linear;
          box-shadow:inset 0px 0px 0px 1px var(--bg_color);
          &:hover {
            cursor: pointer
          }
          &:active {
            -o-user-select: none;
            -ms-user-select: none;
            -moz-user-select: none;
            -webkit-user-select: none;
            user-select: none;
          }
        }
      }
    }
  `
}