const sm_icon_button_alt = require('buttons/sm-icon-button-alt')
const sm_text_button = require('buttons/sm-text-button')

const sheet = new CSSStyleSheet
sheet.replaceSync(get_theme())
/******************************************************************************
  WINDOW BAR COMPONENT
******************************************************************************/
// ----------------------------------------
// MODULE STATE & ID
var count = 0
const [cwd, dir] = [process.cwd(), __filename].map(x => new URL(x, 'file://').href)
const ID = dir.slice(cwd.length)
const STATE = { ids: {}, net: {} } // all state of component module
// ----------------------------------------
const default_opts = { }

module.exports = window_bar

function window_bar (opts = default_opts, protocol) {
  // ----------------------------------------
  // ID + JSON STATE
  // ----------------------------------------
  const name = `window_bar-${count++}`
  // ----------------------------------------
  // OPTS
  // ----------------------------------------
  const {
    icon_close_light, 
    icon_arrow_down_light, 
    icon_arrow_up_light
  } = opts.data.img_src
  // ----------------------------------------
  // PROTOCOL
  // ----------------------------------------
  const up_send = protocol({ from: name }, msg => {})
  // ----------------------------------------
  // TEMPLATE
  // ----------------------------------------
  const el = document.createElement('div')
  const shopts = { mode: 'closed' }
  const shadow = el.attachShadow(shopts)
  shadow.adoptedStyleSheets = [sheet]
  shadow.innerHTML = `<div class="window_bar">
    <div class="application_icon_wrapper"></div>
    <div class="application_name"><span>${opts.name}</span></div>
    <div class="window_bar_actions">
    <div class="actions_wrapper"></div>
    <div class="actions_toggle_btn"></div>
    </div>
  </div>`
  const window_bar_actions = shadow.querySelector('.window_bar_actions')
  const actions_wrapper = shadow.querySelector('.actions_wrapper')
  // ----------------------------------------
  const actions_toggle_btn = shadow.querySelector('.actions_toggle_btn').attachShadow(shopts)
  const application_icon_wrapper = shadow.querySelector('.application_icon_wrapper').attachShadow(shopts)
  // ----------------------------------------
  // ELEMENTS
  // ----------------------------------------
  application_icon_wrapper.append(sm_icon_button_alt({ src: opts.src }, app_icon_protocol))
  if (opts.action_buttons) {
    actions_wrapper.append(...opts.action_buttons.map(text => {
      return shadowfy()(sm_text_button({ toggle: true, text }, action_protocol(text)))
    }))
    actions_toggle_btn.append(sm_icon_button_alt({
      src: icon_arrow_down_light,
      src_active: icon_arrow_up_light
    }, window_bar_protoocol))
  }
  if (opts.icon_buttons) window_bar_actions.append(...opts.icon_buttons.map(({ icon, action: type }) => {
    return shadowfy()(sm_icon_button_alt({ src: icon }, type_protocol(type)))
  }))
  window_bar_actions.append(shadowfy()(sm_icon_button_alt({ src: icon_close_light }, close_window_protocol)))
  // ----------------------------------------
  // INIT
  // ----------------------------------------

  return el

  function shadowfy (props = {}, sheets = []) {
    return element => {
      const el = Object.assign(document.createElement('div'), { ...props })
      const sh = el.attachShadow(shopts)
      sh.adoptedStyleSheets = sheets
      sh.append(element)
      return el
    }
  }
  function app_icon_protocol () { }
  function action_protocol (text) { return send => { return msg => {} } }
  function close_window_protocol (message, send) {
    return listen
    function listen (message) {
      const { head, refs, type, data, meta } = message
      const on = { 'click': onclose }
      const action = on[type] || invalid
      action(message)
    }
    function onclose (event) {
      up_send({
        head: { by: name, to: 'app_cover_0', mid: 0 },
        type: 'toggle_active_state',
        data: { active_state : 'active' }
      })
    }
  }
  function type_protocol (type) {
    return (message, send) => {
      return listen
      function listen (message) {
        const { head, refs, type, data, meta } = message
        const on = { 'click': onclick }
        const action = on[type] || invalid
        action(message)
      }
    }
    function onclick (message) {
      up_send({ head: {  by: name, to: 'app_cover_0', mid: 0 }, type })
    }
  }
  function window_bar_protoocol (message, send) {
    return listen
    function listen (message) {
      const { head, refs, type, data, meta } = message
      const PROTOCOL = {
        'click': toggle_window_active_state
      }
      const action = PROTOCOL[type] || invalid
      action(message)
      async function toggle_window_active_state (message) {
        console.log('yo')
        const { head, refs, type, data, meta } = message
        const  { active_state } = data
        console.log({active_state})
        actions_wrapper.style.display = active_state ? 'none' : 'flex'
      }
    }
  }
  function invalid (message) { console.error('invalid type', message) }
}
function get_theme () {
  return `
    .window_bar {
      position: relative;
      z-index: 2;
      background-color: var(--primary_color);
      display: flex;
      width: 100%;
      justify-content: flex-start;
      background-size: 5px 5px;
      background-image: repeating-linear-gradient(0deg, var(--bg_color), var(--bg_color) 2px, var(--primary_color) 2px, var(--primary_color));
      container-type: inline-size;
      border: 1px solid var(--primary_color);
      box-sizing: border-box;
      .application_name {
        display: flex;
        align-items: center;
        min-height: 100%;
        width: max-content;
        color: var(--bg_color);
        padding: 0 10px;
        font-size: 14px;
        letter-spacing: -1px;
        box-sizing: border-box;
        border: 1px solid var(--primary_color);
        background-color: var(--primary_color);
      }
      .window_bar_actions {
        margin-left: auto;
        display: flex;
        &.active {
          .actions_wrapper {
            display: flex;
          }
        }
        .actions_wrapper {
          display: none;
          position: absolute;
          flex-direction: column;
          z-index: 10;
          width: 100%;
          height: max-content;
          top: 30px;
          right: 0;
          background-color: var(--bg_color);
          border: 1px solid var(--primary_color);
        }
      }
    }
    @container (min-width: 856px) {
      .window_bar {
        .window_bar_actions {
          .actions_toggle_btn {
            display: none;
          }
          .actions_wrapper {
            display: flex !important;
            position: relative;
            flex-direction: row;
            top: unset;
            right: unset;
            height: 100%;
            width: max-content;
            border: 0px;
          }
        }
      }
    }
  `
}