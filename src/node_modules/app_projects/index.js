module.exports = app_projects

const path = require('path')
const cwd = process.cwd()
const prefix = path.relative(cwd, __dirname)

// Importing components
const project_card = require('project_card')
const window_bar = require('window_bar')
const project_filter = require('project_filter')
const scrollbar = require('scrollbar')



// CSS Boiler Plat
const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)

function app_projects(opts, protocol){

    const {data} = opts
    const PROTOCOL = {
        setFilter
    }
     // Assigning all the icons
     const { img_src: {
        icon_discord = `${prefix}/icon_discord.png`,
        icon_twitter = `${prefix}/icon_twitter.png`,
        icon_github = `${prefix}/icon_github.png`,
        icon_folder = `${prefix}/icon_folder.svg`,
        project_logo_1 = `${prefix}/project_logo_1.png`,
    } } = data


    
    const el = document.createElement('div')
    const shadow = el.attachShadow( { mode: 'closed' } )
    shadow.innerHTML = `
        <div class="main_wrapper">
            <div class="filter_wrapper">
                <div class="project_wrapper"></div>
            </div>
        </div>
        <style> ${get_theme} </style>
    `

    // Adding applcation window bar
    const app_project_window = window_bar({
        name: 'OUR_PROJECTS',
        src: icon_folder,
        data: data,
    }, app_projects_protocol)

    // Adding project cards
    const project_wrapper = shadow.querySelector('.project_wrapper')
    const cardsData = [
        { 
            title: 'Official starting of the web course.',
            project_logo: project_logo_1,
            project: 'Agregore', 
            link: '/',
            socials: [icon_github, icon_twitter, icon_discord],
            desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
            tags: ['Hypercore', 'Decentralized', 'DApp'],
            active_state: 'ACTIVE',
            data: data,
        },{
            title: 'Official starting of the web course.',
            project_logo: project_logo_1,
            project: 'Ogre', 
            link: '/',
            socials: [icon_github, icon_twitter, icon_discord],
            desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
            tags: ['p2p', 'tag', 'DeFi'],
            active_state: 'ACTIVE',
            data: data,
        },{
            title: 'Official starting of the web course.',
            project_logo: project_logo_1,
            project: 'Gerger', 
            link: '/',
            socials: [icon_github, icon_twitter, icon_discord],
            desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
            tags: ['p2p', 'Decentralized', 'Hypercore'],
            active_state: 'UNACTIVE',
            data: data
        },{ 
            title: 'Official starting of the web course.',
            project_logo: project_logo_1,
            project: 'Agregored', 
            link: '/',
            socials: [icon_github, icon_twitter, icon_discord],
            desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
            tags: ['DAO', 'Web3', 'DApp'],
            active_state: 'PAUSED',
            data: data
        },{
            title: 'Official starting of the web course.',
            project_logo: project_logo_1,
            project: 'Ogred', 
            link: '/',
            socials: [icon_github, icon_twitter, icon_discord],
            desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
            tags: ['DeFi', 'tag', 'Hypercore'],
            active_state: 'UNACTIVE',
            data: data
        },{
            title: 'Official starting of the web course.',
            project_logo: project_logo_1,
            project: 'Ragregore', 
            link: '/',
            socials: [icon_github, icon_twitter, icon_discord],
            desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
            tags: ['DApp', 'Hypercore', 'DeFi'],
            active_state: 'PAUSED',
            data: data
        },{
            title: 'Official starting of the web course.',
            project_logo: project_logo_1,
            project: 'Agregorey',
            link: '/',
            socials: [icon_github, icon_twitter, icon_discord],
            desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
            tags: ['DAO', 'Decentralized', 'Web3'],
            active_state: 'ACTIVE',
            data: data
        },
    ]
    const tags = new Set()
    cardsData.forEach(card_data => card_data.tags.forEach(tag => tags.add(tag))) 

    const project_cards = cardsData.map((card_data) => project_card(card_data))
    project_cards.forEach((card) => {
        project_wrapper.append(card)
    })

    
    const main_wrapper = shadow.querySelector('.main_wrapper')
    main_wrapper.append(scrollbar({data}, app_projects_protocol))

    const filter_wrapper = shadow.querySelector('.filter_wrapper')
    filter_wrapper.append(project_filter({data, tags: Array.from(tags)}, app_projects_protocol))
    
    shadow.adoptedStyleSheets = [ sheet ]
    shadow.prepend(app_project_window)
    return el



    //protocol
    function app_projects_protocol(handshake, send){
        if(handshake.from.includes('scrollbar')){
            const ro = new ResizeObserver(entries => send[0]());
            ro.observe(main_wrapper);
            project_wrapper.onscroll = send[0]
            PROTOCOL['handleScroll'] = send[0]
            PROTOCOL['getScrollInfo'] = send[1]
            return [listen, setScrollTop]
        }
        else if(handshake.from.includes('project_filter')){
            return listen
        }
        else if(handshake.from.includes('window_bar')){
            PROTOCOL['toggle_active_state'] = toggle_active_state;
            return listen;
        }
        function listen (message){
            const {head, type, data} = message
            const {by, to, mid} = head
            // if( to !== name) return console.error('address unknown', message)
            if(by.includes('scrollbar'))
            {
                message.data = {sh: project_wrapper.scrollHeight, ch: project_wrapper.clientHeight, st: project_wrapper.scrollTop}
                PROTOCOL.getScrollInfo(message)
            }
            else if(by.includes('project_filter')){
                PROTOCOL[type](data)
            }
            else if(by.includes('window_bar')){
                PROTOCOL[type](message)
            }
        }
    }
    async function setScrollTop(value){
        project_wrapper.scrollTop = value
    }
    async function setFilter(data){
        PROTOCOL[data.filter] = data.value
        project_wrapper.innerHTML = ''
        let cardfilter = [...cardsData]
        if(PROTOCOL.SEARCH)
            cardfilter = cardfilter.filter((card_data) => {return card_data.project.toLowerCase().match(PROTOCOL.SEARCH.toLowerCase())})

        if(PROTOCOL.STATUS && PROTOCOL.STATUS !== 'NULL')
            cardfilter = cardfilter.filter((card_data) => {return card_data.active_state === PROTOCOL.STATUS && card_data })

        if(PROTOCOL.TAGS && PROTOCOL.TAGS !== 'NULL')
            cardfilter = cardfilter.filter((card_data) => {return card_data.tags.includes(PROTOCOL.TAGS) && card_data })

        const project_cards = cardfilter.map((card_data) => project_card(card_data))
            project_cards.forEach((card) => {
                project_wrapper.append(card)
        })
        PROTOCOL['handleScroll']()
    }
    async function toggle_active_state (message) {
        const {head, refs, type, data, meta} = message
        const {active_state} = data
        ;( active_state === 'active')?el.style.display = 'none':''
    }


}

function get_theme(){
    return`
        .main_wrapper{
            display: flex;
            container-type: inline-size;
            width:100%;
            height: 100%;
        }
        .filter_wrapper{
            width:100%;
            height: 100%;
        }
        *{
            box-sizing: border-box;
        }
        .project_wrapper{
            --s: 20px; /* control the size */
            --_g: var(--bg_color) /* first color */ 0 25%, #0000 0 50%;
            background:
                repeating-conic-gradient(at 66% 66%,var(--_g)),
                repeating-conic-gradient(at 33% 33%,var(--_g)),
                var(--primary_color);  /* second color */ 
            background-size: var(--s) var(--s);  
            border:1px solid var(--primary_color);
            width:100%;
            height: 400px;
            padding: 0px;
            display: grid;
            gap:20px;
            grid-template-columns: 12fr;
            box-sizing: border-box;
            overflow: scroll;
            scrollbar-width: none; /* For Firefox */
        }
        .project_wrapper::-webkit-scrollbar {
            display: none;
        }
        @container(min-width: 768px) {
            .project_wrapper{
                grid-template-columns: repeat(2, 6fr);
            }
        }

        @container(min-width: 1200px) {
            .project_wrapper{
                grid-template-columns: repeat(3, 4fr);
            }
        }

        /*---------- Mobile devices ----------*/
        @media (min-width: 480px) {
        }

        /*---------- iPads, Tablets ----------*/
        @media (min-width: 768px) {
        }

        /*---------- Mediuem screens, laptops ----------*/
        @media (min-width: 1024px) {}
    `
}