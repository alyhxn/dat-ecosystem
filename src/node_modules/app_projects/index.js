const path = require('path')
const project_card = require('project_card')
const window_bar = require('window_bar')
const project_filter = require('project_filter')
const scrollbar = require('scrollbar')

const cwd = process.cwd()
const prefix = path.relative(cwd, __dirname)

// CSS Boiler Plat
const sheet = new CSSStyleSheet
const theme = get_theme()
sheet.replaceSync(theme)

module.exports = app_projects

function app_projects (opts, protocol) {
  const { data } = opts
  const PROTOCOL = { setFilter }
  // Assigning all the icons
  const { img_src: {
    icon_discord = `${prefix}/icon_discord.png`,
    icon_twitter = `${prefix}/icon_twitter.png`,
    icon_github = `${prefix}/icon_github.png`,
    icon_folder = `${prefix}/icon_folder.svg`,
    project_logo_1 = `${prefix}/project_logo_1.png`,
  } } = data
  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })
  shadow.innerHTML = `
    <div class="main_wrapper">
      <div class="filter_wrapper">
        <div class="project_wrapper"></div>
      </div>
    </div>
    <style> ${get_theme()} </style>
  `
  // Adding applcation window bar
  const app_project_window = window_bar({
    name: 'OUR_PROJECTS',
    src: icon_folder,
    data,
  }, app_projects_protocol)
  // Adding project cards
  const project_wrapper = shadow.querySelector('.project_wrapper')
  const cardsData = [{ 
    title: 'Official starting of the web course.',
    project_logo: project_logo_1,
    project: 'Agregore', 
    link: '/',
    socials: [icon_github, icon_twitter, icon_discord],
    desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
    tags: ['Hypercore', 'Hyperplane', 'Hypertension'],
    active_state: 'ACTIVE',
    data,
  },{
    title: 'Official starting of the web course.',
    project_logo: project_logo_1,
    project: 'Ogre', 
    link: '/',
    socials: [icon_github, icon_twitter, icon_discord],
    desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
    tags: ['Dag', 'tag', 'Decentralized'],
    active_state: 'ACTIVE',
    data,
  },{
    title: 'Official starting of the web course.',
    project_logo: project_logo_1,
    project: 'Gerger', 
    link: '/',
    socials: [icon_github, icon_twitter, icon_discord],
    desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
    tags: ['Dag', 'Hyperplane', 'Hypercore'],
    active_state: 'UNACTIVE',
    data
  },{ 
    title: 'Official starting of the web course.',
    project_logo: project_logo_1,
    project: 'Agregored', 
    link: '/',
    socials: [icon_github, icon_twitter, icon_discord],
    desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
    tags: ['Daff', 'Dep1', 'Hypertension'],
    active_state: 'PAUSED',
    data
  },{
    title: 'Official starting of the web course.',
    project_logo: project_logo_1,
    project: 'Ogred', 
    link: '/',
    socials: [icon_github, icon_twitter, icon_discord],
    desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
    tags: ['Decentralized', 'tag', 'Hypercore'],
    active_state: 'UNACTIVE',
    data
  },{
    title: 'Official starting of the web course.',
    project_logo: project_logo_1,
    project: 'Ragregore', 
    link: '/',
    socials: [icon_github, icon_twitter, icon_discord],
    desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
    tags: ['Hypertension', 'Hypercore', 'Decentralized'],
    active_state: 'PAUSED',
    data
  },{
    title: 'Official starting of the web course.',
    project_logo: project_logo_1,
    project: 'Agregorey',
    link: '/',
    socials: [icon_github, icon_twitter, icon_discord],
    desc: 'Keep track of whānau whakapapa information, preserve and share cultural records and narratives, own and control whānau data and servers, and build a stronger sense of whānau, community and identity.', 
    tags: ['Daff', 'Hyperplane', 'Dep1'],
    active_state: 'ACTIVE',
    data
  }]
  const tags = new Set()
  cardsData.forEach(card_data => card_data.tags.forEach(tag => tags.add(tag))) 
  project_wrapper.append(...cardsData.map(project_card))
  const main_wrapper = shadow.querySelector('.main_wrapper')
  opts.data.img_src.icon_arrow_start = opts.data.img_src.icon_arrow_up
  opts.data.img_src.icon_arrow_end = opts.data.img_src.icon_arrow_down
  main_wrapper.append(scrollbar({data}, app_projects_protocol))
  const filter_wrapper = shadow.querySelector('.filter_wrapper')
  filter_wrapper.append(project_filter({data, tags: Array.from(tags)}, app_projects_protocol))
  shadow.prepend(app_project_window)
  shadow.adoptedStyleSheets = [sheet]

  return el

  //protocol
  function app_projects_protocol (handshake, send) {
    if (!send) {
      send = handshake
      handshake = { from: send.id }
    }
    if (handshake.from.includes('scrollbar')) {

      const ro = new ResizeObserver(entries => send({ type: 'handle_scroll' }))
      ro.observe(main_wrapper)
      project_wrapper.onscroll = event => send({ type: 'handle_scroll' })
      PROTOCOL.scrollbar = send

      return listen
    }
    else if (handshake.from.includes('project_filter')) {
      return listen
    }
    else if (handshake.from.includes('window_bar')) {
      PROTOCOL['toggle_active_state'] = toggle_active_state
      return listen
    }
    function listen (message) {
      const { head,  refs, type, data, meta } = message
      const { by, to, mid } = head
      // if( to !== name) return console.error('address unknown', message)
      if (by.includes('scrollbar')) {
        if (message.type === 'set_scroll_start') return setScrollTop(message.data)
        message.type = 'update_size'
        message.data = {
          sh: project_wrapper.scrollHeight,
          ch: project_wrapper.clientHeight,
          st: project_wrapper.scrollTop
        }
        PROTOCOL.scrollbar(message)
      }
      else if (by.includes('project_filter')) {
        PROTOCOL[type](data)
      }
      else if (by.includes('window_bar')) {
        PROTOCOL[type](message)
      }
    }
  }
  async function setScrollTop (value) {
    project_wrapper.scrollTop = value
  }
  async function setFilter (data) {
    PROTOCOL[data.filter] = data.value
    project_wrapper.innerHTML = ''
    let cardfilter = [...cardsData]
    if (PROTOCOL.SEARCH) {
      cardfilter = cardfilter.filter((card_data) => {
        return card_data.project.toLowerCase().match(PROTOCOL.SEARCH.toLowerCase())
      })
    }
    if (PROTOCOL.STATUS && PROTOCOL.STATUS !== 'NULL') {
      cardfilter = cardfilter.filter((card_data) => {
        return card_data.active_state === PROTOCOL.STATUS && card_data
      })
    }
    if (PROTOCOL.TAGS && PROTOCOL.TAGS !== 'NULL') {
      cardfilter = cardfilter.filter((card_data) => {
        return card_data.tags.includes(PROTOCOL.TAGS) && card_data
      })
    }
    project_wrapper.append(...cardfilter.map(project_card))
    PROTOCOL.scrollbar({ type: 'handle_scroll' })
  }
  async function toggle_active_state (message) {
    const { head, refs, type, data, meta } = message
    const { active_state } = data
    ;(active_state === 'active')?el.style.display = 'none':''
  }
}
function get_theme () {
  return`
    .main_wrapper {
      display: flex;
      container-type: inline-size;
      width: 100%;
      height: 100%;
      margin-bottom: 30px;
      border: 1px solid var(--primary_color);
      * {
        box-sizing: border-box;
      }
      .filter_wrapper {
        width: 100%;
        height: 100%;
        .project_wrapper {
          --s: 20px; /* control the size */
          --_g: var(--bg_color) /* first color */ 0 25%, #0000 0 50%;
          background:
            repeating-conic-gradient(at 66% 66%,var(--_g)),
            repeating-conic-gradient(at 33% 33%,var(--_g)),
            var(--primary_color);  /* second color */ 
          background-size: var(--s) var(--s);  
          border: 1px solid var(--primary_color);
          width: 100%;
          height: 400px;
          padding: 0px;
          display: grid;
          gap: 20px;
          grid-template-columns: 12fr;
          box-sizing: border-box;
          overflow: scroll;
          scrollbar-width: none; /* For Firefox */
          &::-webkit-scrollbar {
            display: none;
          }
        }
      }
    }
    @container (min-width: 768px) {
      .main_wrapper {
        .filter_wrapper {
          .project_wrapper {
            grid-template-columns: repeat(2, 6fr);
          }
        }
      }
    }
    @container (min-width: 1200px) {
      .main_wrapper {
        .filter_wrapper {
          .project_wrapper {
            grid-template-columns: repeat(3, 4fr);
          }
        }
      }
    }
  `
}